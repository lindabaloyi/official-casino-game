{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Desktop\\\\Linda Baloyi\\\\casino\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\nimport { initializeGame, handleBuild, rankValue, handleAddToBuild, handleTrail, handleCapture } from './game-logic';\nimport CapturedCards from './CapturedCards';\nimport ActionModal from './ActionModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  CARD: 'card'\n};\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initializeGame());\n  const [modalInfo, setModalInfo] = useState(null);\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []);\n  const handleModalAction = useCallback(action => {\n    setGameState(currentGameState => {\n      const {\n        draggedCard,\n        targetCard\n      } = action.payload;\n      switch (action.type) {\n        case 'capture':\n          return handleCapture(currentGameState, draggedCard, [targetCard]);\n        case 'build':\n          return handleBuild(currentGameState, draggedCard, [targetCard], action.buildValue);\n        default:\n          return currentGameState;\n      }\n    });\n    setModalInfo(null); // Close the modal after action\n  }, []);\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n    setGameState(currentGameState => {\n      const {\n        currentPlayer,\n        playerHands,\n        tableCards\n      } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n\n      // 1. Check if it's the current player's turn.\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n\n      // --- ACTION LOGIC ---\n\n      // CASE 1: Dropped on a BUILD\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState; // Build might have been captured by another action\n\n        // Action A: CAPTURE the build\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, build.cards);\n        }\n\n        // If capture is not possible, the move is invalid. Provide a clear, direct reason.\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n\n      // CASE 2: Dropped on a LOOSE CARD\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState; // Card might have been captured\n\n        // --- AMBIGUITY ANALYSIS ---\n        // Case A: Dropped card has the same rank as the table card (e.g., 6 on 6)\n        if (rankValue(draggedCard.rank) === rankValue(looseCard.rank)) {\n          const remainingHand = playerHand.filter(c => c.rank !== draggedCard.rank || c.suit !== draggedCard.suit);\n          const possibleActions = [];\n\n          // Action 1: Capture (always possible in this case)\n          possibleActions.push({\n            type: 'capture',\n            label: `Capture ${looseCard.rank}`,\n            payload: {\n              draggedCard,\n              targetCard: looseCard\n            }\n          });\n\n          // Action 2: Set Build (e.g., 6 on 6 to build a 6)\n          const setBuildValue = rankValue(draggedCard.rank);\n          if (remainingHand.some(c => rankValue(c.rank) === setBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${setBuildValue}`,\n              buildValue: setBuildValue,\n              payload: {\n                draggedCard,\n                targetCard: looseCard\n              }\n            });\n          }\n\n          // Action 3: Sum Build (e.g., 4 on 4 to build an 8)\n          const sumBuildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n          if (sumBuildValue <= 10 && remainingHand.some(c => rankValue(c.rank) === sumBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${sumBuildValue}`,\n              buildValue: sumBuildValue,\n              payload: {\n                draggedCard,\n                targetCard: looseCard\n              }\n            });\n          }\n          if (possibleActions.length > 1) {\n            setModalInfo({\n              title: 'Choose Your Action',\n              message: `You played a ${draggedCard.rank} on a ${looseCard.rank}. What would you like to do?`,\n              actions: possibleActions\n            });\n            return currentGameState; // Wait for modal choice\n          } else {\n            return handleCapture(currentGameState, draggedCard, [looseCard]); // Only one option, auto-execute\n          }\n        }\n\n        // Case B: Dropped card has a different rank (standard build attempt)\n        const buildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n        const canCreateBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n        if (canCreateBuild) {\n          return handleBuild(currentGameState, draggedCard, [looseCard], buildValue);\n        }\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n\n      // Default case if targetInfo.type is unknown\n      return currentGameState;\n    }); // No dependencies needed for setGameState updater form\n  }, []); // The function itself is stable\n\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => {\n      // If a nested drop target has already handled the drop, do nothing.\n      if (monitor.didDrop()) {\n        return;\n      }\n      handleTrailCard(item.card, item.player);\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }), [handleTrailCard]);\n  const isActive = isOver && canDrop;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: `game-board ${isActive ? 'active-drop' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Round: \", gameState.round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"captured-cards-positioned\",\n      children: gameState.playerCaptures.map((capturedCards, index) => /*#__PURE__*/_jsxDEV(CapturedCards, {\n        player: index,\n        cards: capturedCards\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards,\n        onDropOnCard: handleDropOnCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: gameState.playerHands.map((hand, index) => /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: index,\n        cards: hand,\n        isCurrent: gameState.currentPlayer === index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionModal, {\n      modalInfo: modalInfo,\n      onAction: handleModalAction,\n      onCancel: () => setModalInfo(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onRestart,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"6AHAYTkfs3eQvdF2XtDH9myylHI=\", false, function () {\n  return [useDrop];\n});\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useCallback","PlayerHand","TableCards","useDrop","initializeGame","handleBuild","rankValue","handleAddToBuild","handleTrail","handleCapture","CapturedCards","ActionModal","jsxDEV","_jsxDEV","ItemTypes","CARD","GameBoard","onRestart","_s","gameState","setGameState","modalInfo","setModalInfo","handleTrailCard","card","player","currentGameState","currentPlayer","alert","handleModalAction","action","draggedCard","targetCard","payload","type","buildValue","handleDropOnCard","draggedItem","targetInfo","console","warn","playerHands","tableCards","playerHand","build","find","c","buildId","rank","value","cards","looseCard","suit","remainingHand","filter","possibleActions","push","label","setBuildValue","some","sumBuildValue","length","title","message","actions","canCreateBuild","isOver","canDrop","drop","accept","item","monitor","didDrop","collect","isActive","ref","className","children","round","fileName","_jsxFileName","lineNumber","columnNumber","playerCaptures","map","capturedCards","index","onDropOnCard","hand","isCurrent","onAction","onCancel","gameOver","winner","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\n\nimport {\n  initializeGame,\n  handleBuild,\n  rankValue,\n  handleAddToBuild,\n  handleTrail,\n  handleCapture,\n} from './game-logic';\nimport CapturedCards from './CapturedCards';\nimport ActionModal from './ActionModal';\n\nconst ItemTypes = {\n  CARD: 'card',\n};\n\nfunction GameBoard({ onRestart }) {\n  const [gameState, setGameState] = useState(initializeGame());\n  const [modalInfo, setModalInfo] = useState(null);\n\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []);\n\n  const handleModalAction = useCallback((action) => {\n    setGameState(currentGameState => {\n      const { draggedCard, targetCard } = action.payload;\n      switch (action.type) {\n        case 'capture':\n          return handleCapture(currentGameState, draggedCard, [targetCard]);\n        case 'build':\n          return handleBuild(currentGameState, draggedCard, [targetCard], action.buildValue);\n        default:\n          return currentGameState;\n      }\n    });\n    setModalInfo(null); // Close the modal after action\n  }, []);\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n\n    setGameState(currentGameState => {\n      const { currentPlayer, playerHands, tableCards } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n\n      // 1. Check if it's the current player's turn.\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n\n      // --- ACTION LOGIC ---\n\n      // CASE 1: Dropped on a BUILD\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState; // Build might have been captured by another action\n\n        // Action A: CAPTURE the build\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, build.cards);\n        }\n\n        // If capture is not possible, the move is invalid. Provide a clear, direct reason.\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n\n      // CASE 2: Dropped on a LOOSE CARD\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState; // Card might have been captured\n\n        // --- AMBIGUITY ANALYSIS ---\n        // Case A: Dropped card has the same rank as the table card (e.g., 6 on 6)\n        if (rankValue(draggedCard.rank) === rankValue(looseCard.rank)) {\n          const remainingHand = playerHand.filter(c => c.rank !== draggedCard.rank || c.suit !== draggedCard.suit);\n          const possibleActions = [];\n\n          // Action 1: Capture (always possible in this case)\n          possibleActions.push({\n            type: 'capture',\n            label: `Capture ${looseCard.rank}`,\n            payload: { draggedCard, targetCard: looseCard }\n          });\n\n          // Action 2: Set Build (e.g., 6 on 6 to build a 6)\n          const setBuildValue = rankValue(draggedCard.rank);\n          if (remainingHand.some(c => rankValue(c.rank) === setBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${setBuildValue}`,\n              buildValue: setBuildValue,\n              payload: { draggedCard, targetCard: looseCard }\n            });\n          }\n\n          // Action 3: Sum Build (e.g., 4 on 4 to build an 8)\n          const sumBuildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n          if (sumBuildValue <= 10 && remainingHand.some(c => rankValue(c.rank) === sumBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${sumBuildValue}`,\n              buildValue: sumBuildValue,\n              payload: { draggedCard, targetCard: looseCard }\n            });\n          }\n\n          if (possibleActions.length > 1) {\n            setModalInfo({\n              title: 'Choose Your Action',\n              message: `You played a ${draggedCard.rank} on a ${looseCard.rank}. What would you like to do?`,\n              actions: possibleActions\n            });\n            return currentGameState; // Wait for modal choice\n          } else {\n            return handleCapture(currentGameState, draggedCard, [looseCard]); // Only one option, auto-execute\n          }\n        }\n\n        // Case B: Dropped card has a different rank (standard build attempt)\n        const buildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n        const canCreateBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n\n        if (canCreateBuild) {\n          return handleBuild(currentGameState, draggedCard, [looseCard], buildValue);\n        }\n\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n\n      // Default case if targetInfo.type is unknown\n      return currentGameState;\n    }); // No dependencies needed for setGameState updater form\n  }, []); // The function itself is stable\n\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => {\n      // If a nested drop target has already handled the drop, do nothing.\n      if (monitor.didDrop()) {\n        return;\n      }\n      handleTrailCard(item.card, item.player);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  }), [handleTrailCard]);\n\n  const isActive = isOver && canDrop;\n\n  return (\n    <div ref={drop} className={`game-board ${isActive ? 'active-drop' : ''}`}>\n      <div className=\"status-section\">\n        <p>Round: {gameState.round}</p>\n      </div>\n      <div className=\"captured-cards-positioned\">\n        {gameState.playerCaptures.map((capturedCards, index) => (\n          <CapturedCards key={index} player={index} cards={capturedCards} />\n        ))}\n      </div>\n      <div className=\"table-cards-section\">\n        <TableCards\n          cards={gameState.tableCards}\n          onDropOnCard={handleDropOnCard}\n        />\n      </div>\n      <div className=\"player-hands-section\">\n        {gameState.playerHands\n          .map((hand, index) => (\n            <PlayerHand\n              key={index}\n              player={index}\n              cards={hand}\n              isCurrent={gameState.currentPlayer === index}\n            />\n          ))}\n      </div>\n      <ActionModal\n        modalInfo={modalInfo}\n        onAction={handleModalAction}\n        onCancel={() => setModalInfo(null)}\n      />\n      {gameState.gameOver && (\n        <div className=\"game-over-section\">\n          <h2>Game Over</h2>\n          <p>Winner: Player {gameState.winner + 1}</p>\n          <button onClick={onRestart}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}