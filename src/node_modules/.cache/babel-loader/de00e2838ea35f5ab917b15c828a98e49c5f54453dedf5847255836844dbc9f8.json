{"ast":null,"code":"// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        value: rankValue(rank)\n      });\n    }\n  }\n  deck = shuffleDeck(deck);\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = rank => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles dropping a card on the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to drop.\n * @returns {object} The new game state.\n */\nexport const handleDrop = (gameState, card) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n\n  // Check if the card's rank is already represented in an active build or on the table\n  const cardRank = card.rank;\n\n  // Check builds on the table\n  const buildWithSameRank = tableCards.some(c => {\n    if (c.type === 'build') {\n      return c.cards.some(buildCard => buildCard.rank === cardRank);\n    }\n    return false;\n  });\n\n  // Check loose cards on the table\n  const looseCardWithSameRank = tableCards.some(c => c.type !== 'build' && c.rank === cardRank);\n  if (buildWithSameRank || looseCardWithSameRank) {\n    // Prevent dropping the card if rank already represented\n    return gameState;\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== card);\n\n  // Add the card to the table\n  const newTableCards = [...tableCards, card];\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n\n  // Validate player has the exact number of cards of the selectedCard's rank in their hand\n  const rankToBuild = selectedCard.rank;\n  const requiredCount = selectedCard.value; // Number of copies needed to build\n\n  // Count how many cards of this rank the player has in hand\n  const playerHand = playerHands[currentPlayer];\n  const countInHand = playerHand.filter(c => c.rank === rankToBuild).length;\n  if (countInHand < requiredCount) {\n    // Not enough cards to build, reject build\n    return gameState;\n  }\n  const allCardsInBuild = [selectedCard, ...selectedTableCards];\n  const buildValue = allCardsInBuild.reduce((sum, card) => sum + card.value, 0);\n\n  // Create the new build object\n  const newBuild = {\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer\n  };\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== selectedCard);\n\n  // Remove the selected cards from the table\n  const newTableCards = tableCards.filter(c => !selectedTableCards.includes(c));\n  newTableCards.push(newBuild);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter(c => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    playerCaptures,\n    currentPlayer\n  } = gameState;\n  const capturedCards = [selectedCard, ...selectedTableCards];\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== selectedCard);\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(c => !selectedTableCards.includes(c));\n\n  // Add the captured cards to the player's captures\n  const newPlayerCaptures = [...playerCaptures];\n  newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...capturedCards];\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = playerCaptures => {\n  const scores = [0, 0];\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = gameState => {\n  return gameState.playerHands.every(hand => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = gameState => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};","map":{"version":3,"names":["initializeGame","suits","ranks","deck","suit","rank","push","value","rankValue","shuffleDeck","playerHands","i","pop","tableCards","playerCaptures","currentPlayer","round","scores","gameOver","winner","length","j","Math","floor","random","parseInt","handleDrop","gameState","card","cardRank","buildWithSameRank","some","c","type","cards","buildCard","looseCardWithSameRank","newPlayerHands","filter","newTableCards","handleBuild","selectedCard","selectedTableCards","rankToBuild","requiredCount","playerHand","countInHand","allCardsInBuild","buildValue","reduce","sum","newBuild","owner","includes","findValidCaptures","validCaptures","cardValue","findCombinations","target","result","find","startIndex","currentCombination","currentSum","looseCards","looseCardCombinations","combination","buildCaptures","build","findValidBuilds","validBuilds","handleCapture","capturedCards","newPlayerCaptures","calculateScores","forEach","captures","playerIndex","score","isRoundOver","every","hand","isGameOver"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/game-logic.js"],"sourcesContent":["\n// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, value: rankValue(rank) });\n    }\n  }\n\n  deck = shuffleDeck(deck);\n\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null,\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = (deck) => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = (rank) => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles dropping a card on the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to drop.\n * @returns {object} The new game state.\n */\nexport const handleDrop = (gameState, card) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  // Check if the card's rank is already represented in an active build or on the table\n  const cardRank = card.rank;\n\n  // Check builds on the table\n  const buildWithSameRank = tableCards.some((c) => {\n    if (c.type === 'build') {\n      return c.cards.some((buildCard) => buildCard.rank === cardRank);\n    }\n    return false;\n  });\n\n  // Check loose cards on the table\n  const looseCardWithSameRank = tableCards.some((c) => c.type !== 'build' && c.rank === cardRank);\n\n  if (buildWithSameRank || looseCardWithSameRank) {\n    // Prevent dropping the card if rank already represented\n    return gameState;\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== card);\n\n  // Add the card to the table\n  const newTableCards = [...tableCards, card];\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  // Validate player has the exact number of cards of the selectedCard's rank in their hand\n  const rankToBuild = selectedCard.rank;\n  const requiredCount = selectedCard.value; // Number of copies needed to build\n\n  // Count how many cards of this rank the player has in hand\n  const playerHand = playerHands[currentPlayer];\n  const countInHand = playerHand.filter((c) => c.rank === rankToBuild).length;\n\n  if (countInHand < requiredCount) {\n    // Not enough cards to build, reject build\n    return gameState;\n  }\n\n  const allCardsInBuild = [selectedCard, ...selectedTableCards];\n  const buildValue = allCardsInBuild.reduce((sum, card) => sum + card.value, 0);\n\n  // Create the new build object\n  const newBuild = {\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer,\n  };\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== selectedCard);\n\n  // Remove the selected cards from the table\n  const newTableCards = tableCards.filter((c) => !selectedTableCards.includes(c));\n  newTableCards.push(newBuild);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, playerCaptures, currentPlayer } = gameState;\n\n  const capturedCards = [selectedCard, ...selectedTableCards];\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== selectedCard);\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter((c) => !selectedTableCards.includes(c));\n\n  // Add the captured cards to the player's captures\n  const newPlayerCaptures = [...playerCaptures];\n  newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...capturedCards];\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = (playerCaptures) => {\n  const scores = [0, 0];\n\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = (gameState) => {\n  return gameState.playerHands.every((hand) => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = (gameState) => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}