{"ast":null,"code":"// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        value: rankValue(rank)\n      });\n    }\n  }\n  deck = shuffleDeck(deck);\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = rank => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles trailing a card to the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to trail.\n * @returns {object} The new game state.\n */\nexport const handleTrail = (gameState, card) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer,\n    round\n  } = gameState;\n\n  // New Rule: In round 1, a player cannot trail if they own a build.\n  if (round === 1) {\n    const playerOwnsBuild = tableCards.some(c => c.type === 'build' && c.owner === currentPlayer);\n    if (playerOwnsBuild) {\n      alert(\"You cannot trail a card while you own a build in the first round. You must capture or build.\");\n      return gameState; // Invalid move\n    }\n  }\n\n  // Rule: You cannot trail a card if a loose card of the same rank is on the table.\n  const looseCardRanks = tableCards.filter(c => !c.type) // Only check loose cards, not builds\n  .map(c => c.rank);\n  if (looseCardRanks.includes(card.rank)) {\n    alert(`You cannot trail a ${card.rank} because one is already on the table.`);\n    return gameState; // Invalid move, return original state.\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to trail not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: [...tableCards, card],\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {Array} tableCardsInBuild - The cards from the table to include in the build.\n * @param {number} buildValue - The target value of the build.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, playerCard, tableCardsInBuild, buildValue) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n  const playerHand = playerHands[currentPlayer];\n\n  // Validation 1: Player must have a card in hand that can capture this new build.\n  // The card used for the build doesn't count.\n  const canCaptureBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== playerCard.rank || c.suit !== playerCard.suit));\n  if (!canCaptureBuild) {\n    // This validation is now primarily handled in GameBoard.js before calling,\n    // but it's good to keep it here as a safeguard.\n    alert(`Cannot build ${buildValue}. You do not have a card of this value to capture it later.`);\n    return gameState; // Invalid build, return original state.\n  }\n  const allCardsInBuild = [playerCard, ...tableCardsInBuild];\n  // Sort the cards in the build by value, so they are always displayed consistently.\n  // Smallest card value will be at the end of the array to appear \"on top\" in a simple map render.\n  allCardsInBuild.sort((a, b) => rankValue(b.rank) - rankValue(a.rank));\n  const sumOfCards = allCardsInBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n  // Validation 2: The sum of cards in the build must equal the declared build value.\n  if (sumOfCards !== buildValue) {\n    alert(`Sum of cards (${sumOfCards}) does not match build value (${buildValue}).`);\n    return gameState;\n  }\n\n  // Create the new build object\n  const newBuild = {\n    buildId: `build-${Date.now()}-${Math.random()}`,\n    // Unique ID for the build\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer\n  };\n\n  // Remove the played card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Played card not found in hand.\");\n    return gameState;\n  }\n\n  // Remove the used cards from the table\n  const tableCardIdentifiers = tableCardsInBuild.map(c => `${c.rank}-${c.suit}`);\n  const newTableCards = tableCards.filter(c => {\n    // Keep existing builds that are not part of this new build\n    if (c.type === 'build') {\n      return true;\n    }\n    // Filter out loose cards that are now in the new build\n    return !tableCardIdentifiers.includes(`${c.rank}-${c.suit}`);\n  });\n  newTableCards.push(newBuild);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Handles adding cards to an existing build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {object} tableCard - The loose card from the table to add to the build.\n * @param {object} buildToAddTo - The build object being modified.\n * @returns {object} The new game state.\n */\nexport const handleAddToBuild = (gameState, playerCard, tableCard, buildToAddTo) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n\n  // Rule: The cards being added must sum to the value of the build they are being added to.\n  const addedValue = rankValue(playerCard.rank) + rankValue(tableCard.rank);\n  if (addedValue !== buildToAddTo.value) {\n    alert(`Illegal move. The cards you are adding (${playerCard.rank} + ${tableCard.rank}) sum to ${addedValue}, not the build's value of ${buildToAddTo.value}.`);\n    return gameState;\n  }\n\n  // Combine all cards for the new, larger build. The new pair is sorted\n  // so it stacks visually, but the existing build's card order is preserved.\n  const newPair = [playerCard, tableCard];\n  newPair.sort((a, b) => rankValue(b.rank) - rankValue(a.rank));\n  const newBuildCards = [...buildToAddTo.cards, ...newPair];\n\n  // Create the new build object, keeping the original value and owner.\n  const newBuild = {\n    ...buildToAddTo,\n    cards: newBuildCards\n  };\n\n  // --- Update Game State ---\n\n  // 1. Remove played card from player's hand.\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to add to build not found in hand.\");\n    return gameState;\n  }\n\n  // 2. Remove the old build and the used loose card from the table.\n  const newTableCards = tableCards.filter(item => {\n    if (item.buildId === buildToAddTo.buildId) return false; // Remove old build\n    if (!item.type && item.rank === tableCard.rank && item.suit === tableCard.suit) return false; // Remove loose card\n    return true;\n  });\n\n  // 3. Add the new, larger build to the table.\n  newTableCards.push(newBuild);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter(c => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    playerCaptures,\n    currentPlayer\n  } = gameState;\n\n  // Create deep copies for safe mutation\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const newPlayerCaptures = JSON.parse(JSON.stringify(playerCaptures));\n\n  // Remove the selected card from the player's hand\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to capture with not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  const capturedItemsIdentifiers = new Set(selectedTableCards.map(c => `${c.rank}-${c.suit}`));\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(item => {\n    if (item.type === 'build') {\n      // If any card of this build is in the list of cards to capture, the whole build is captured.\n      const isBuildCaptured = item.cards.some(cardInBuild => capturedItemsIdentifiers.has(`${cardInBuild.rank}-${cardInBuild.suit}`));\n      return !isBuildCaptured; // return false (remove it) if captured\n    } else {\n      // It's a loose card.\n      return !capturedItemsIdentifiers.has(`${item.rank}-${item.suit}`);\n    }\n  });\n\n  // Add the captured cards to the player's captures\n  // The cards that form this specific capture event are grouped together\n  // to preserve the visual order of the capture.\n  const capturedGroup = [selectedCard, ...selectedTableCards];\n  newPlayerCaptures[currentPlayer].push(capturedGroup);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = playerCaptures => {\n  const scores = [0, 0];\n\n  // Flatten the captured groups for each player to get a simple list of cards\n  const flatPlayerCaptures = playerCaptures.map(captureGroups => captureGroups.flat());\n  flatPlayerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (flatPlayerCaptures[0].length > flatPlayerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (flatPlayerCaptures[1].length > flatPlayerCaptures[0].length) {\n    scores[1] += 3;\n  }\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = gameState => {\n  return gameState.playerHands.every(hand => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = gameState => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};","map":{"version":3,"names":["initializeGame","suits","ranks","deck","suit","rank","push","value","rankValue","shuffleDeck","playerHands","i","pop","tableCards","playerCaptures","currentPlayer","round","scores","gameOver","winner","length","j","Math","floor","random","parseInt","handleTrail","gameState","card","playerOwnsBuild","some","c","type","owner","alert","looseCardRanks","filter","map","includes","newPlayerHands","JSON","parse","stringify","hand","cardIndex","findIndex","splice","console","error","handleBuild","playerCard","tableCardsInBuild","buildValue","playerHand","canCaptureBuild","allCardsInBuild","sort","a","b","sumOfCards","reduce","sum","newBuild","buildId","Date","now","cards","tableCardIdentifiers","newTableCards","handleAddToBuild","tableCard","buildToAddTo","addedValue","newPair","newBuildCards","item","findValidCaptures","selectedCard","validCaptures","cardValue","findCombinations","target","result","find","startIndex","currentCombination","currentSum","looseCards","looseCardCombinations","combination","buildCaptures","build","findValidBuilds","validBuilds","handleCapture","selectedTableCards","newPlayerCaptures","capturedItemsIdentifiers","Set","isBuildCaptured","cardInBuild","has","capturedGroup","calculateScores","flatPlayerCaptures","captureGroups","flat","forEach","captures","playerIndex","score","isRoundOver","every","isGameOver"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/game-logic.js"],"sourcesContent":["\n// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, value: rankValue(rank) });\n    }\n  }\n\n  deck = shuffleDeck(deck);\n\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null,\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = (deck) => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = (rank) => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles trailing a card to the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to trail.\n * @returns {object} The new game state.\n */\nexport const handleTrail = (gameState, card) => {\n  const { playerHands, tableCards, currentPlayer, round } = gameState;\n\n  // New Rule: In round 1, a player cannot trail if they own a build.\n  if (round === 1) {\n    const playerOwnsBuild = tableCards.some(\n      (c) => c.type === 'build' && c.owner === currentPlayer\n    );\n    if (playerOwnsBuild) {\n      alert(\"You cannot trail a card while you own a build in the first round. You must capture or build.\");\n      return gameState; // Invalid move\n    }\n  }\n\n  // Rule: You cannot trail a card if a loose card of the same rank is on the table.\n  const looseCardRanks = tableCards\n    .filter(c => !c.type) // Only check loose cards, not builds\n    .map(c => c.rank);\n\n  if (looseCardRanks.includes(card.rank)) {\n    alert(`You cannot trail a ${card.rank} because one is already on the table.`);\n    return gameState; // Invalid move, return original state.\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);\n\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to trail not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: [...tableCards, card],\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {Array} tableCardsInBuild - The cards from the table to include in the build.\n * @param {number} buildValue - The target value of the build.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, playerCard, tableCardsInBuild, buildValue) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n  const playerHand = playerHands[currentPlayer];\n\n  // Validation 1: Player must have a card in hand that can capture this new build.\n  // The card used for the build doesn't count.\n  const canCaptureBuild = playerHand.some(\n    c => rankValue(c.rank) === buildValue && (c.rank !== playerCard.rank || c.suit !== playerCard.suit)\n  );\n  if (!canCaptureBuild) {\n    // This validation is now primarily handled in GameBoard.js before calling,\n    // but it's good to keep it here as a safeguard.\n    alert(`Cannot build ${buildValue}. You do not have a card of this value to capture it later.`);\n    return gameState; // Invalid build, return original state.\n  }\n\n  const allCardsInBuild = [playerCard, ...tableCardsInBuild];\n  // Sort the cards in the build by value, so they are always displayed consistently.\n  // Smallest card value will be at the end of the array to appear \"on top\" in a simple map render.\n  allCardsInBuild.sort((a, b) => rankValue(b.rank) - rankValue(a.rank));\n  const sumOfCards = allCardsInBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n  // Validation 2: The sum of cards in the build must equal the declared build value.\n  if (sumOfCards !== buildValue) {\n      alert(`Sum of cards (${sumOfCards}) does not match build value (${buildValue}).`);\n      return gameState;\n  }\n\n  // Create the new build object\n  const newBuild = {\n    buildId: `build-${Date.now()}-${Math.random()}`, // Unique ID for the build\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer,\n  };\n\n  // Remove the played card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Played card not found in hand.\");\n    return gameState;\n  }\n\n  // Remove the used cards from the table\n  const tableCardIdentifiers = tableCardsInBuild.map(c => `${c.rank}-${c.suit}`);\n  const newTableCards = tableCards.filter(c => {\n    // Keep existing builds that are not part of this new build\n    if (c.type === 'build') {\n      return true;\n    }\n    // Filter out loose cards that are now in the new build\n    return !tableCardIdentifiers.includes(`${c.rank}-${c.suit}`);\n  });\n  newTableCards.push(newBuild);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Handles adding cards to an existing build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {object} tableCard - The loose card from the table to add to the build.\n * @param {object} buildToAddTo - The build object being modified.\n * @returns {object} The new game state.\n */\nexport const handleAddToBuild = (gameState, playerCard, tableCard, buildToAddTo) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  // Rule: The cards being added must sum to the value of the build they are being added to.\n  const addedValue = rankValue(playerCard.rank) + rankValue(tableCard.rank);\n  if (addedValue !== buildToAddTo.value) {\n    alert(`Illegal move. The cards you are adding (${playerCard.rank} + ${tableCard.rank}) sum to ${addedValue}, not the build's value of ${buildToAddTo.value}.`);\n    return gameState;\n  }\n\n  // Combine all cards for the new, larger build. The new pair is sorted\n  // so it stacks visually, but the existing build's card order is preserved.\n  const newPair = [playerCard, tableCard];\n  newPair.sort((a, b) => rankValue(b.rank) - rankValue(a.rank));\n\n  const newBuildCards = [...buildToAddTo.cards, ...newPair];\n\n  // Create the new build object, keeping the original value and owner.\n  const newBuild = {\n    ...buildToAddTo,\n    cards: newBuildCards,\n  };\n\n  // --- Update Game State ---\n\n  // 1. Remove played card from player's hand.\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to add to build not found in hand.\");\n    return gameState;\n  }\n\n  // 2. Remove the old build and the used loose card from the table.\n  const newTableCards = tableCards.filter(item => {\n    if (item.buildId === buildToAddTo.buildId) return false; // Remove old build\n    if (!item.type && item.rank === tableCard.rank && item.suit === tableCard.suit) return false; // Remove loose card\n    return true;\n  });\n\n  // 3. Add the new, larger build to the table.\n  newTableCards.push(newBuild);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, playerCaptures, currentPlayer } = gameState;\n\n  // Create deep copies for safe mutation\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const newPlayerCaptures = JSON.parse(JSON.stringify(playerCaptures));\n\n  // Remove the selected card from the player's hand\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to capture with not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n\n  const capturedItemsIdentifiers = new Set(selectedTableCards.map(c => `${c.rank}-${c.suit}`));\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(item => {\n    if (item.type === 'build') {\n      // If any card of this build is in the list of cards to capture, the whole build is captured.\n      const isBuildCaptured = item.cards.some(cardInBuild => capturedItemsIdentifiers.has(`${cardInBuild.rank}-${cardInBuild.suit}`));\n      return !isBuildCaptured; // return false (remove it) if captured\n    } else {\n      // It's a loose card.\n      return !capturedItemsIdentifiers.has(`${item.rank}-${item.suit}`);\n    }\n  });\n\n  // Add the captured cards to the player's captures\n  // The cards that form this specific capture event are grouped together\n  // to preserve the visual order of the capture.\n  const capturedGroup = [selectedCard, ...selectedTableCards];\n  newPlayerCaptures[currentPlayer].push(capturedGroup);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = (playerCaptures) => {\n  const scores = [0, 0];\n\n  // Flatten the captured groups for each player to get a simple list of cards\n  const flatPlayerCaptures = playerCaptures.map(captureGroups => captureGroups.flat());\n\n  flatPlayerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (flatPlayerCaptures[0].length > flatPlayerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (flatPlayerCaptures[1].length > flatPlayerCaptures[0].length) {\n    scores[1] += 3;\n  }\n\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = (gameState) => {\n  return gameState.playerHands.every((hand) => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = (gameState) => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}