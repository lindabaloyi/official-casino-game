{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Documents\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport DeckDisplay from './DeckDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  deck: [],\n  // will hold the 40 cards\n  tableCards: [],\n  playerHands: [[], []],\n  // two players\n  playerCaptures: [[], []],\n  // captured cards per player\n  currentPlayer: 0,\n  round: 1,\n  scores: [0, 0]\n  // Additional state as needed\n};\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [showActionPopup, setShowActionPopup] = useState(false);\n  const [draggedCard, setDraggedCard] = useState(null);\n  const [dropTarget, setDropTarget] = useState(null);\n\n  // Helper to get top card of opponent's captured pile\n  const getOpponentTopCapture = () => {\n    const opponent = (gameState.currentPlayer + 1) % 2;\n    const captures = gameState.playerCaptures[opponent];\n    if (captures.length === 0) return null;\n    return captures[captures.length - 1];\n  };\n  useEffect(() => {\n    // Initialize deck and deal cards here\n    const suits = ['♠', '♥', '♦', '♣'];\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n\n    // Create deck of 40 cards\n    let deck = [];\n    for (let suit of suits) {\n      for (let rank of ranks) {\n        deck.push({\n          suit,\n          rank\n        });\n      }\n    }\n\n    // Shuffle deck\n    for (let i = deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n\n    // Deal 10 cards to each player for round 1\n    const playerHands = [[], []];\n    for (let i = 0; i < 10; i++) {\n      playerHands[0].push(deck.pop());\n      playerHands[1].push(deck.pop());\n    }\n\n    // Set initial table cards empty as no player has played yet\n    const tableCards = [];\n    setGameState(prev => ({\n      ...prev,\n      deck,\n      playerHands,\n      tableCards,\n      currentPlayer: 0,\n      round: 1,\n      playerCaptures: [[], []],\n      scores: [0, 0]\n    }));\n    setSelectedCard(null);\n  }, []);\n  const handleAction = action => {\n    console.log('Action chosen:', action);\n    switch (action) {\n      case 'drop':\n        handleDrop();\n        break;\n      case 'build':\n        handleBuild();\n        break;\n      case 'capture':\n        handleCapture();\n        break;\n      default:\n        console.warn('Unknown action:', action);\n    }\n  };\n\n  // Check if round is over: no cards in deck and both players have empty hands\n  const isRoundOver = () => {\n    const noCardsInDeck = gameState.deck.length === 0;\n    const noCardsInHands = gameState.playerHands.every(hand => hand.length === 0);\n    return noCardsInDeck && noCardsInHands;\n  };\n\n  // Start next round or end game\n  const handleRoundEnd = () => {\n    // Helper function to calculate score for a player's captured cards\n    const calculateScore = capturedCards => {\n      let score = 0;\n      capturedCards.forEach(card => {\n        if (!card.rank || !card.suit) return; // skip builds or invalid cards\n        if (card.rank === 'A') score += 1;\n        if (card.rank === '2' && card.suit === '♠') score += 1;\n        if (card.rank === '10' && card.suit === '♦') score += 2;\n      });\n      return score;\n    };\n    if (gameState.round === 1) {\n      // Reshuffle and redeal for round 2\n      let newDeck = [...gameState.playerCaptures[0], ...gameState.playerCaptures[1], ...gameState.tableCards];\n      // Clear captures and table cards\n      const playerCaptures = [[], []];\n      const tableCards = [];\n      // Shuffle new deck\n      for (let i = newDeck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n      }\n      // Deal 10 cards to each player\n      const playerHands = [[], []];\n      for (let i = 0; i < 10; i++) {\n        playerHands[0].push(newDeck.pop());\n        playerHands[1].push(newDeck.pop());\n      }\n      // Set 4 cards on table\n      for (let i = 0; i < 4; i++) {\n        tableCards.push(newDeck.pop());\n      }\n      setGameState(prev => ({\n        ...prev,\n        deck: newDeck,\n        playerHands,\n        playerCaptures,\n        tableCards,\n        round: 2,\n        currentPlayer: 0\n      }));\n    } else {\n      // Round 2 ended, game over - calculate final scores and determine winner\n      const scores = [calculateScore(gameState.playerCaptures[0]), calculateScore(gameState.playerCaptures[1])];\n\n      // Bonus for most captured cards\n      const capturesCount = [gameState.playerCaptures[0].length, gameState.playerCaptures[1].length];\n      if (capturesCount[0] > capturesCount[1]) {\n        scores[0] += 3; // bonus points for most cards\n      } else if (capturesCount[1] > capturesCount[0]) {\n        scores[1] += 3;\n      }\n      let winner = null;\n      if (scores[0] > scores[1]) winner = 0;else if (scores[1] > scores[0]) winner = 1;else winner = 'draw';\n      setGameState(prev => ({\n        ...prev,\n        scores,\n        gameOver: true,\n        winner\n      }));\n    }\n  };\n\n  // Wrap setGameState to include round end check and turn switch\n  const updateGameStateAfterAction = newState => {\n    if (isRoundOver()) {\n      handleRoundEnd();\n    } else {\n      setGameState(newState);\n    }\n    setSelectedCard(null);\n  };\n  const handleDrop = () => {\n    console.log('Drop action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to drop.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    // Check if selectedCard is in player's hand\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    // Remove card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n    // Add card to table as loose card\n    const newTableCards = [...gameState.tableCards, selectedCard];\n    // Update state and clear selected card, switch turn, check round end\n    updateGameStateAfterAction({\n      ...gameState,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      currentPlayer: (currentPlayer + 1) % 2\n    });\n  };\n  const handleBuild = () => {\n    console.log('Build action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to build with.');\n      return;\n    }\n    if (gameState.tableCards.length === 0) {\n      alert('Cannot build: No cards on the table.');\n      return;\n    }\n    // Check if any card on table is tagged as base and matches the selected card rank\n    const baseCardExists = gameState.tableCards.some(card => card.type === 'build' && card.buildType === 'BASE' && card.baseValue === selectedCard.rank);\n    if (baseCardExists) {\n      alert('Cannot build: The base card is already tagged and cannot be extended.');\n      return;\n    }\n    // For building, find the base card on table to stack on\n    const baseCardIndex = gameState.tableCards.findIndex(card => card.type === 'build' && card.buildType === 'BASE' && card.baseValue === selectedCard.rank);\n    if (baseCardIndex === -1) {\n      alert('No base card found to build on.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    // Create a new build stack by adding the selected card on top of the base build\n    const baseBuild = gameState.tableCards[baseCardIndex];\n    const newBuildStack = {\n      ...baseBuild,\n      cards: [...baseBuild.cards, selectedCard],\n      buildType: 'STACKED'\n    };\n    // Remove card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n    // Replace the base build with the new stacked build\n    const newTableCards = [...gameState.tableCards];\n    newTableCards[baseCardIndex] = newBuildStack;\n    // Update state and clear selected card\n    setGameState(prev => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      currentPlayer: (currentPlayer + 1) % 2\n    }));\n    setSelectedCard(null);\n  };\n\n  // Helper function to find valid captures for a given card\n  const findValidCaptures = (card, tableCards) => {\n    // Flatten table cards into individual cards and builds\n    // For simplicity, consider loose cards and builds separately\n    const captures = [];\n\n    // Helper to get numeric value of rank for comparison\n    const rankValue = rank => {\n      if (rank === 'A') return 1;\n      if (rank === 'J') return 11;\n      if (rank === 'Q') return 12;\n      if (rank === 'K') return 13;\n      return parseInt(rank, 10);\n    };\n    const cardValue = rankValue(card.rank);\n\n    // Check loose cards for capture (matching rank)\n    const looseCards = tableCards.filter(c => !c.type);\n    looseCards.forEach(tableCard => {\n      if (rankValue(tableCard.rank) === cardValue) {\n        captures.push([tableCard]);\n      }\n    });\n\n    // Check builds for capture (owner must be current player, baseValue matches card)\n    const buildCaptures = tableCards.filter(c => c.type === 'build' && c.baseValue === card.rank);\n    buildCaptures.forEach(build => {\n      captures.push(build.cards);\n    });\n\n    // TODO: Implement logic to find combinations of cards that sum to cardValue for capture\n\n    return captures;\n  };\n  const handleCapture = () => {\n    console.log('Capture action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to capture with.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    const validCaptures = findValidCaptures(selectedCard, gameState.tableCards);\n    if (validCaptures.length === 0) {\n      alert('No valid captures available with selected card.');\n      return;\n    }\n\n    // Auto-select largest capture combo\n    let largestCapture = validCaptures[0];\n    validCaptures.forEach(capture => {\n      if (capture.length > largestCapture.length) {\n        largestCapture = capture;\n      }\n    });\n\n    // Remove captured cards from table\n    const newTableCards = gameState.tableCards.filter(c => {\n      if (c.type === 'build') {\n        // Remove build if all cards are captured\n        return !largestCapture.every(card => c.cards.some(bc => bc.rank === card.rank && bc.suit === card.suit));\n      } else {\n        // Loose card\n        return !largestCapture.some(card => card.rank === c.rank && card.suit === c.suit);\n      }\n    });\n\n    // Remove selected card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n\n    // Add captured cards and selected card to player's captures\n    const newPlayerCaptures = [...gameState.playerCaptures];\n    newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...largestCapture, selectedCard];\n\n    // Update state and clear selected card, switch turn\n    setGameState(prev => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      playerCaptures: newPlayerCaptures,\n      currentPlayer: (currentPlayer + 1) % 2\n    }));\n    setSelectedCard(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      style: {\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      onDragOver: e => {\n        e.preventDefault();\n      },\n      onDrop: e => {\n        e.preventDefault();\n        if (!draggedCard) return;\n        // Check if dropped card matches any card on table for capture/build options\n        const matches = gameState.tableCards.some(tableCard => {\n          if (tableCard.type === 'build') {\n            return tableCard.baseValue === draggedCard.rank;\n          } else {\n            return tableCard.rank === draggedCard.rank;\n          }\n        });\n        setSelectedCard(draggedCard);\n        setDropTarget('table');\n        if (matches) {\n          setShowActionPopup(true);\n        } else {\n          // If no match, just drop (place card on table)\n          handleDrop();\n        }\n        setDraggedCard(null);\n      },\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"opponent-captures-section\",\n      style: {\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: gameState.currentPlayer === 0 ? /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: 0,\n        cards: gameState.playerHands[0],\n        isCurrent: true,\n        selectedCard: selectedCard,\n        onSelectCard: setSelectedCard,\n        onDragStart: (e, card) => {\n          setDraggedCard(card);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: 1,\n        cards: gameState.playerHands[1],\n        isCurrent: true,\n        selectedCard: selectedCard,\n        onSelectCard: setSelectedCard,\n        onDragStart: (e, card) => {\n          setDraggedCard(card);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), showActionPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-popup\",\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: 'white',\n        border: '2px solid black',\n        borderRadius: '8px',\n        padding: '20px',\n        zIndex: 1000,\n        boxShadow: '0 4px 8px rgba(0,0,0,0.3)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Choose Action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Card: \", selectedCard.rank, selectedCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleBuild();\n          setShowActionPopup(false);\n        },\n        disabled: gameState.gameOver,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Build Base\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // For build on top, we can extend handleBuild with a param if needed\n          handleBuild();\n          setShowActionPopup(false);\n        },\n        disabled: gameState.gameOver,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Build On Top\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleCapture();\n          setShowActionPopup(false);\n        },\n        disabled: gameState.gameOver,\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setShowActionPopup(false);\n          setSelectedCard(null);\n        },\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 9\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Final Scores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Player 1: \", gameState.scores[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Player 2: \", gameState.scores[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 11\n      }, this), gameState.winner === 'draw' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The game is a draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"restart-button-section\",\n      style: {\n        marginTop: '20px',\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onRestart,\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"n+hA2WZ7jQHZwhHiRmGEacU/H0w=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","TableCards","DeckDisplay","jsxDEV","_jsxDEV","initialGameState","deck","tableCards","playerHands","playerCaptures","currentPlayer","round","scores","GameBoard","onRestart","_s","gameState","setGameState","selectedCard","setSelectedCard","showActionPopup","setShowActionPopup","draggedCard","setDraggedCard","dropTarget","setDropTarget","getOpponentTopCapture","opponent","captures","length","suits","ranks","suit","rank","push","i","j","Math","floor","random","pop","prev","handleAction","action","console","log","handleDrop","handleBuild","handleCapture","warn","isRoundOver","noCardsInDeck","noCardsInHands","every","hand","handleRoundEnd","calculateScore","capturedCards","score","forEach","card","newDeck","capturesCount","winner","gameOver","updateGameStateAfterAction","newState","alert","playerHand","cardIndex","findIndex","c","newPlayerHands","slice","newTableCards","baseCardExists","some","type","buildType","baseValue","baseCardIndex","baseBuild","newBuildStack","cards","findValidCaptures","rankValue","parseInt","cardValue","looseCards","filter","tableCard","buildCaptures","build","validCaptures","largestCapture","capture","bc","newPlayerCaptures","className","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","e","preventDefault","onDrop","matches","marginTop","player","isCurrent","onSelectCard","onDragStart","position","top","left","transform","backgroundColor","border","borderRadius","padding","zIndex","boxShadow","onClick","disabled","marginRight","marginLeft","window","location","reload","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/LB/Documents/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PlayerHand from './PlayerHand';\r\nimport TableCards from './TableCards';\r\nimport DeckDisplay from './DeckDisplay';\r\n\r\nconst initialGameState = {\r\n  deck: [], // will hold the 40 cards\r\n  tableCards: [],\r\n  playerHands: [[], []], // two players\r\n  playerCaptures: [[], []], // captured cards per player\r\n  currentPlayer: 0,\r\n  round: 1,\r\n  scores: [0, 0],\r\n  // Additional state as needed\r\n};\r\n\r\nfunction GameBoard({ onRestart }) {\r\n  const [gameState, setGameState] = useState(initialGameState);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n  const [showActionPopup, setShowActionPopup] = useState(false);\r\n  const [draggedCard, setDraggedCard] = useState(null);\r\n  const [dropTarget, setDropTarget] = useState(null);\r\n\r\n  // Helper to get top card of opponent's captured pile\r\n  const getOpponentTopCapture = () => {\r\n    const opponent = (gameState.currentPlayer + 1) % 2;\r\n    const captures = gameState.playerCaptures[opponent];\r\n    if (captures.length === 0) return null;\r\n    return captures[captures.length - 1];\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initialize deck and deal cards here\r\n    const suits = ['♠', '♥', '♦', '♣'];\r\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\r\n\r\n    // Create deck of 40 cards\r\n    let deck = [];\r\n    for (let suit of suits) {\r\n      for (let rank of ranks) {\r\n        deck.push({ suit, rank });\r\n      }\r\n    }\r\n\r\n    // Shuffle deck\r\n    for (let i = deck.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [deck[i], deck[j]] = [deck[j], deck[i]];\r\n    }\r\n\r\n    // Deal 10 cards to each player for round 1\r\n    const playerHands = [[], []];\r\n    for (let i = 0; i < 10; i++) {\r\n      playerHands[0].push(deck.pop());\r\n      playerHands[1].push(deck.pop());\r\n    }\r\n\r\n    // Set initial table cards empty as no player has played yet\r\n    const tableCards = [];\r\n\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      deck,\r\n      playerHands,\r\n      tableCards,\r\n      currentPlayer: 0,\r\n      round: 1,\r\n      playerCaptures: [[], []],\r\n      scores: [0, 0],\r\n    }));\r\n    setSelectedCard(null);\r\n  }, []);\r\n\r\n  const handleAction = (action) => {\r\n    console.log('Action chosen:', action);\r\n    switch (action) {\r\n      case 'drop':\r\n        handleDrop();\r\n        break;\r\n      case 'build':\r\n        handleBuild();\r\n        break;\r\n      case 'capture':\r\n        handleCapture();\r\n        break;\r\n      default:\r\n        console.warn('Unknown action:', action);\r\n    }\r\n  };\r\n\r\n  // Check if round is over: no cards in deck and both players have empty hands\r\n  const isRoundOver = () => {\r\n    const noCardsInDeck = gameState.deck.length === 0;\r\n    const noCardsInHands = gameState.playerHands.every((hand) => hand.length === 0);\r\n    return noCardsInDeck && noCardsInHands;\r\n  };\r\n\r\n  // Start next round or end game\r\n  const handleRoundEnd = () => {\r\n    // Helper function to calculate score for a player's captured cards\r\n    const calculateScore = (capturedCards) => {\r\n      let score = 0;\r\n      capturedCards.forEach((card) => {\r\n        if (!card.rank || !card.suit) return; // skip builds or invalid cards\r\n        if (card.rank === 'A') score += 1;\r\n        if (card.rank === '2' && card.suit === '♠') score += 1;\r\n        if (card.rank === '10' && card.suit === '♦') score += 2;\r\n      });\r\n      return score;\r\n    };\r\n\r\n    if (gameState.round === 1) {\r\n      // Reshuffle and redeal for round 2\r\n      let newDeck = [...gameState.playerCaptures[0], ...gameState.playerCaptures[1], ...gameState.tableCards];\r\n      // Clear captures and table cards\r\n      const playerCaptures = [[], []];\r\n      const tableCards = [];\r\n      // Shuffle new deck\r\n      for (let i = newDeck.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\r\n      }\r\n      // Deal 10 cards to each player\r\n      const playerHands = [[], []];\r\n      for (let i = 0; i < 10; i++) {\r\n        playerHands[0].push(newDeck.pop());\r\n        playerHands[1].push(newDeck.pop());\r\n      }\r\n      // Set 4 cards on table\r\n      for (let i = 0; i < 4; i++) {\r\n        tableCards.push(newDeck.pop());\r\n      }\r\n      setGameState((prev) => ({\r\n        ...prev,\r\n        deck: newDeck,\r\n        playerHands,\r\n        playerCaptures,\r\n        tableCards,\r\n        round: 2,\r\n        currentPlayer: 0,\r\n      }));\r\n    } else {\r\n      // Round 2 ended, game over - calculate final scores and determine winner\r\n      const scores = [\r\n        calculateScore(gameState.playerCaptures[0]),\r\n        calculateScore(gameState.playerCaptures[1]),\r\n      ];\r\n\r\n      // Bonus for most captured cards\r\n      const capturesCount = [\r\n        gameState.playerCaptures[0].length,\r\n        gameState.playerCaptures[1].length,\r\n      ];\r\n      if (capturesCount[0] > capturesCount[1]) {\r\n        scores[0] += 3; // bonus points for most cards\r\n      } else if (capturesCount[1] > capturesCount[0]) {\r\n        scores[1] += 3;\r\n      }\r\n\r\n      let winner = null;\r\n      if (scores[0] > scores[1]) winner = 0;\r\n      else if (scores[1] > scores[0]) winner = 1;\r\n      else winner = 'draw';\r\n\r\n      setGameState((prev) => ({\r\n        ...prev,\r\n        scores,\r\n        gameOver: true,\r\n        winner,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Wrap setGameState to include round end check and turn switch\r\n  const updateGameStateAfterAction = (newState) => {\r\n    if (isRoundOver()) {\r\n      handleRoundEnd();\r\n    } else {\r\n      setGameState(newState);\r\n    }\r\n    setSelectedCard(null);\r\n  };\r\n\r\n  const handleDrop = () => {\r\n    console.log('Drop action triggered');\r\n    if (!selectedCard) {\r\n      alert('Please select a card to drop.');\r\n      return;\r\n    }\r\n    const currentPlayer = gameState.currentPlayer;\r\n    const playerHand = gameState.playerHands[currentPlayer];\r\n    // Check if selectedCard is in player's hand\r\n    const cardIndex = playerHand.findIndex(\r\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\r\n    );\r\n    if (cardIndex === -1) {\r\n      alert('Selected card is not in your hand.');\r\n      return;\r\n    }\r\n    // Remove card from player's hand\r\n    const newPlayerHands = [...gameState.playerHands];\r\n    newPlayerHands[currentPlayer] = [\r\n      ...playerHand.slice(0, cardIndex),\r\n      ...playerHand.slice(cardIndex + 1),\r\n    ];\r\n    // Add card to table as loose card\r\n    const newTableCards = [...gameState.tableCards, selectedCard];\r\n    // Update state and clear selected card, switch turn, check round end\r\n    updateGameStateAfterAction({\r\n      ...gameState,\r\n      playerHands: newPlayerHands,\r\n      tableCards: newTableCards,\r\n      currentPlayer: (currentPlayer + 1) % 2,\r\n    });\r\n  };\r\n\r\n  const handleBuild = () => {\r\n    console.log('Build action triggered');\r\n    if (!selectedCard) {\r\n      alert('Please select a card to build with.');\r\n      return;\r\n    }\r\n    if (gameState.tableCards.length === 0) {\r\n      alert('Cannot build: No cards on the table.');\r\n      return;\r\n    }\r\n    // Check if any card on table is tagged as base and matches the selected card rank\r\n    const baseCardExists = gameState.tableCards.some(card => card.type === 'build' && card.buildType === 'BASE' && card.baseValue === selectedCard.rank);\r\n    if (baseCardExists) {\r\n      alert('Cannot build: The base card is already tagged and cannot be extended.');\r\n      return;\r\n    }\r\n    // For building, find the base card on table to stack on\r\n    const baseCardIndex = gameState.tableCards.findIndex(card => card.type === 'build' && card.buildType === 'BASE' && card.baseValue === selectedCard.rank);\r\n    if (baseCardIndex === -1) {\r\n      alert('No base card found to build on.');\r\n      return;\r\n    }\r\n    const currentPlayer = gameState.currentPlayer;\r\n    const playerHand = gameState.playerHands[currentPlayer];\r\n    const cardIndex = playerHand.findIndex(\r\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\r\n    );\r\n    if (cardIndex === -1) {\r\n      alert('Selected card is not in your hand.');\r\n      return;\r\n    }\r\n    // Create a new build stack by adding the selected card on top of the base build\r\n    const baseBuild = gameState.tableCards[baseCardIndex];\r\n    const newBuildStack = {\r\n      ...baseBuild,\r\n      cards: [...baseBuild.cards, selectedCard],\r\n      buildType: 'STACKED',\r\n    };\r\n    // Remove card from player's hand\r\n    const newPlayerHands = [...gameState.playerHands];\r\n    newPlayerHands[currentPlayer] = [\r\n      ...playerHand.slice(0, cardIndex),\r\n      ...playerHand.slice(cardIndex + 1),\r\n    ];\r\n    // Replace the base build with the new stacked build\r\n    const newTableCards = [...gameState.tableCards];\r\n    newTableCards[baseCardIndex] = newBuildStack;\r\n    // Update state and clear selected card\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      playerHands: newPlayerHands,\r\n      tableCards: newTableCards,\r\n      currentPlayer: (currentPlayer + 1) % 2,\r\n    }));\r\n    setSelectedCard(null);\r\n  };\r\n\r\n  // Helper function to find valid captures for a given card\r\n  const findValidCaptures = (card, tableCards) => {\r\n    // Flatten table cards into individual cards and builds\r\n    // For simplicity, consider loose cards and builds separately\r\n    const captures = [];\r\n\r\n    // Helper to get numeric value of rank for comparison\r\n    const rankValue = (rank) => {\r\n      if (rank === 'A') return 1;\r\n      if (rank === 'J') return 11;\r\n      if (rank === 'Q') return 12;\r\n      if (rank === 'K') return 13;\r\n      return parseInt(rank, 10);\r\n    };\r\n\r\n    const cardValue = rankValue(card.rank);\r\n\r\n    // Check loose cards for capture (matching rank)\r\n    const looseCards = tableCards.filter((c) => !c.type);\r\n    looseCards.forEach((tableCard) => {\r\n      if (rankValue(tableCard.rank) === cardValue) {\r\n        captures.push([tableCard]);\r\n      }\r\n    });\r\n\r\n    // Check builds for capture (owner must be current player, baseValue matches card)\r\n    const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.baseValue === card.rank);\r\n    buildCaptures.forEach((build) => {\r\n      captures.push(build.cards);\r\n    });\r\n\r\n    // TODO: Implement logic to find combinations of cards that sum to cardValue for capture\r\n\r\n    return captures;\r\n  };\r\n\r\n  const handleCapture = () => {\r\n    console.log('Capture action triggered');\r\n    if (!selectedCard) {\r\n      alert('Please select a card to capture with.');\r\n      return;\r\n    }\r\n    const currentPlayer = gameState.currentPlayer;\r\n    const playerHand = gameState.playerHands[currentPlayer];\r\n    const cardIndex = playerHand.findIndex(\r\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\r\n    );\r\n    if (cardIndex === -1) {\r\n      alert('Selected card is not in your hand.');\r\n      return;\r\n    }\r\n\r\n    const validCaptures = findValidCaptures(selectedCard, gameState.tableCards);\r\n    if (validCaptures.length === 0) {\r\n      alert('No valid captures available with selected card.');\r\n      return;\r\n    }\r\n\r\n    // Auto-select largest capture combo\r\n    let largestCapture = validCaptures[0];\r\n    validCaptures.forEach((capture) => {\r\n      if (capture.length > largestCapture.length) {\r\n        largestCapture = capture;\r\n      }\r\n    });\r\n\r\n    // Remove captured cards from table\r\n    const newTableCards = gameState.tableCards.filter((c) => {\r\n      if (c.type === 'build') {\r\n        // Remove build if all cards are captured\r\n        return !largestCapture.every((card) =>\r\n          c.cards.some((bc) => bc.rank === card.rank && bc.suit === card.suit)\r\n        );\r\n      } else {\r\n        // Loose card\r\n        return !largestCapture.some((card) => card.rank === c.rank && card.suit === c.suit);\r\n      }\r\n    });\r\n\r\n    // Remove selected card from player's hand\r\n    const newPlayerHands = [...gameState.playerHands];\r\n    newPlayerHands[currentPlayer] = [\r\n      ...playerHand.slice(0, cardIndex),\r\n      ...playerHand.slice(cardIndex + 1),\r\n    ];\r\n\r\n    // Add captured cards and selected card to player's captures\r\n    const newPlayerCaptures = [...gameState.playerCaptures];\r\n    newPlayerCaptures[currentPlayer] = [\r\n      ...newPlayerCaptures[currentPlayer],\r\n      ...largestCapture,\r\n      selectedCard,\r\n    ];\r\n\r\n    // Update state and clear selected card, switch turn\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      playerHands: newPlayerHands,\r\n      tableCards: newTableCards,\r\n      playerCaptures: newPlayerCaptures,\r\n      currentPlayer: (currentPlayer + 1) % 2,\r\n    }));\r\n    setSelectedCard(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-board\">\r\n      <div className=\"status-section\" style={{ marginBottom: '10px' }}>\r\n      </div>\r\n      <div\r\n        className=\"table-cards-section\"\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n        onDrop={(e) => {\r\n          e.preventDefault();\r\n          if (!draggedCard) return;\r\n          // Check if dropped card matches any card on table for capture/build options\r\n          const matches = gameState.tableCards.some((tableCard) => {\r\n            if (tableCard.type === 'build') {\r\n              return tableCard.baseValue === draggedCard.rank;\r\n            } else {\r\n              return tableCard.rank === draggedCard.rank;\r\n            }\r\n          });\r\n          setSelectedCard(draggedCard);\r\n          setDropTarget('table');\r\n          if (matches) {\r\n            setShowActionPopup(true);\r\n          } else {\r\n            // If no match, just drop (place card on table)\r\n            handleDrop();\r\n          }\r\n          setDraggedCard(null);\r\n        }}\r\n      >\r\n        <TableCards cards={gameState.tableCards} />\r\n      </div>\r\n      <div className=\"opponent-captures-section\" style={{ marginTop: '10px' }}>\r\n      </div>\r\n      <div className=\"player-hands-section\">\r\n        {gameState.currentPlayer === 0 ? (\r\n          <PlayerHand\r\n            player={0}\r\n            cards={gameState.playerHands[0]}\r\n            isCurrent={true}\r\n            selectedCard={selectedCard}\r\n            onSelectCard={setSelectedCard}\r\n            onDragStart={(e, card) => {\r\n              setDraggedCard(card);\r\n            }}\r\n          />\r\n        ) : (\r\n          <PlayerHand\r\n            player={1}\r\n            cards={gameState.playerHands[1]}\r\n            isCurrent={true}\r\n            selectedCard={selectedCard}\r\n            onSelectCard={setSelectedCard}\r\n            onDragStart={(e, card) => {\r\n              setDraggedCard(card);\r\n            }}\r\n          />\r\n        )}\r\n      </div>\r\n      {/* Removed action buttons for drag-and-drop interaction */}\r\n      {/* <div className=\"actions-section\">\r\n        <h3>Actions</h3>\r\n        <button onClick={() => handleAction('drop')} disabled={gameState.gameOver}>Drop (D)</button>\r\n        <button onClick={() => handleAction('build')} disabled={gameState.gameOver}>Build (B)</button>\r\n        <button onClick={() => handleAction('capture')} disabled={gameState.gameOver}>Capture (C)</button>\r\n      </div> */}\r\n      {/* Removed deck display section as per user request */}\r\n      {/* <div className=\"deck-display-section\">\r\n        <DeckDisplay deck={gameState.deck} />\r\n      </div> */}\r\n      {showActionPopup && (\r\n        <div\r\n          className=\"action-popup\"\r\n          style={{\r\n            position: 'fixed',\r\n            top: '50%',\r\n            left: '50%',\r\n            transform: 'translate(-50%, -50%)',\r\n            backgroundColor: 'white',\r\n            border: '2px solid black',\r\n            borderRadius: '8px',\r\n            padding: '20px',\r\n            zIndex: 1000,\r\n            boxShadow: '0 4px 8px rgba(0,0,0,0.3)',\r\n          }}\r\n        >\r\n          <h3>Choose Action</h3>\r\n          <p>\r\n            Card: {selectedCard.rank}\r\n            {selectedCard.suit}\r\n          </p>\r\n          <button\r\n            onClick={() => {\r\n              handleBuild();\r\n              setShowActionPopup(false);\r\n            }}\r\n            disabled={gameState.gameOver}\r\n            style={{ marginRight: '10px' }}\r\n          >\r\n            Build Base\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              // For build on top, we can extend handleBuild with a param if needed\r\n              handleBuild();\r\n              setShowActionPopup(false);\r\n            }}\r\n            disabled={gameState.gameOver}\r\n            style={{ marginRight: '10px' }}\r\n          >\r\n            Build On Top\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleCapture();\r\n              setShowActionPopup(false);\r\n            }}\r\n            disabled={gameState.gameOver}\r\n          >\r\n            Capture\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setShowActionPopup(false);\r\n              setSelectedCard(null);\r\n            }}\r\n            style={{ marginLeft: '10px' }}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      )}\r\n      {gameState.gameOver && (\r\n        <div className=\"game-over-section\" style={{ marginTop: '20px' }}>\r\n          <h2>Game Over</h2>\r\n          <p>Final Scores:</p>\r\n          <ul>\r\n            <li>Player 1: {gameState.scores[0]}</li>\r\n            <li>Player 2: {gameState.scores[1]}</li>\r\n          </ul>\r\n          {gameState.winner === 'draw' ? (\r\n            <p>The game is a draw!</p>\r\n          ) : (\r\n            <p>Winner: Player {gameState.winner + 1}</p>\r\n          )}\r\n          <button onClick={() => window.location.reload()}>Restart Game</button>\r\n        </div>\r\n      )}\r\n      <div className=\"restart-button-section\" style={{ marginTop: '20px', textAlign: 'center' }}>\r\n        <button onClick={onRestart}>Restart Game</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}