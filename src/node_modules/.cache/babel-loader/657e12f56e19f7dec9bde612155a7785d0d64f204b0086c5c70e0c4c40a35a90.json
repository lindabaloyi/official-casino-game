{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Desktop\\\\Linda Baloyi\\\\casino\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\nimport { initializeGame, handleBuild, handleTrail, handleCapture } from './game-logic';\nimport CapturedCards from './CapturedCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  CARD: 'card'\n};\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initializeGame());\n  const rankValue = rank => {\n    if (rank === 'A') return 1;\n    if (rank === 'J') return 11;\n    if (rank === 'Q') return 12;\n    if (rank === 'K') return 13;\n    return parseInt(rank, 10);\n  };\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []); // No dependency on gameState, so this function is stable.\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetCard) => {\n    setGameState(currentGameState => {\n      const currentPlayer = currentGameState.currentPlayer;\n      const playerHand = currentGameState.playerHands[currentPlayer];\n      const playerCaptures = currentGameState.playerCaptures[currentPlayer];\n\n      // Check if dragged card is in player's hand\n      const hasDraggedCard = playerHand.some(c => c.rank === draggedItem.card.rank && c.suit === draggedItem.card.suit);\n      if (!hasDraggedCard) {\n        alert(\"You can only play cards from your hand.\");\n        return currentGameState;\n      }\n\n      // Implement simplified validation logic based on user description\n      // Check if player has a card in hand that sums with dragged and target card to 9\n      const targetRankValue = rankValue(targetCard.rank);\n      const draggedRankValue = rankValue(draggedItem.card.rank);\n\n      // Find if player has a card that sums with dragged and target to 9\n      const neededValue = 9 - (targetRankValue + draggedRankValue);\n      const hasNeededCard = playerHand.some(c => rankValue(c.rank) === neededValue);\n      if (hasNeededCard) {\n        const buildConfirmed = window.confirm(`You can build 9 by combining ${draggedItem.card.rank}${draggedItem.card.suit} and ${targetCard.rank}${targetCard.suit} with a card of value ${neededValue}. Build?`);\n        if (buildConfirmed) {\n          // Call handleBuild from game-logic (to be implemented)\n          return handleBuild(currentGameState, draggedItem.card, targetCard, neededValue);\n        }\n      } else {\n        alert(\"You do not have the required card to build 9.\");\n      }\n\n      // For now, return current state unchanged\n      return currentGameState;\n    });\n  }, [rankValue]);\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: item => handleTrailCard(item.card, item.player),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }), [handleTrailCard]);\n  const isActive = isOver && canDrop;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: `game-board ${isActive ? 'active-drop' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Round: \", gameState.round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"captured-cards-section\",\n      children: gameState.playerCaptures.map((capturedCards, index) => /*#__PURE__*/_jsxDEV(CapturedCards, {\n        player: index,\n        cards: capturedCards\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards,\n        onDropOnCard: handleDropOnCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: gameState.playerHands.map((hand, index) => /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: index,\n        cards: hand,\n        isCurrent: gameState.currentPlayer === index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onRestart,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"GgwXH+fbmBwE3xW252r0yOJq53U=\", false, function () {\n  return [useDrop];\n});\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useCallback","PlayerHand","TableCards","useDrop","initializeGame","handleBuild","handleTrail","handleCapture","CapturedCards","jsxDEV","_jsxDEV","ItemTypes","CARD","GameBoard","onRestart","_s","gameState","setGameState","rankValue","rank","parseInt","handleTrailCard","card","player","currentGameState","currentPlayer","alert","handleDropOnCard","draggedItem","targetCard","playerHand","playerHands","playerCaptures","hasDraggedCard","some","c","suit","targetRankValue","draggedRankValue","neededValue","hasNeededCard","buildConfirmed","window","confirm","isOver","canDrop","drop","accept","item","collect","monitor","isActive","ref","className","children","round","fileName","_jsxFileName","lineNumber","columnNumber","map","capturedCards","index","cards","tableCards","onDropOnCard","hand","isCurrent","gameOver","winner","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\n\nimport {\n  initializeGame,\n  handleBuild,\n  handleTrail,\n  handleCapture,\n} from './game-logic';\nimport CapturedCards from './CapturedCards';\n\nconst ItemTypes = {\n  CARD: 'card',\n};\n\nfunction GameBoard({ onRestart }) {\n  const [gameState, setGameState] = useState(initializeGame());\n\n  const rankValue = (rank) => {\n    if (rank === 'A') return 1;\n    if (rank === 'J') return 11;\n    if (rank === 'Q') return 12;\n    if (rank === 'K') return 13;\n    return parseInt(rank, 10);\n  };\n\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []); // No dependency on gameState, so this function is stable.\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetCard) => {\n    setGameState(currentGameState => {\n      const currentPlayer = currentGameState.currentPlayer;\n      const playerHand = currentGameState.playerHands[currentPlayer];\n      const playerCaptures = currentGameState.playerCaptures[currentPlayer];\n\n      // Check if dragged card is in player's hand\n      const hasDraggedCard = playerHand.some(\n        c => c.rank === draggedItem.card.rank && c.suit === draggedItem.card.suit\n      );\n      if (!hasDraggedCard) {\n        alert(\"You can only play cards from your hand.\");\n        return currentGameState;\n      }\n\n      // Implement simplified validation logic based on user description\n      // Check if player has a card in hand that sums with dragged and target card to 9\n      const targetRankValue = rankValue(targetCard.rank);\n      const draggedRankValue = rankValue(draggedItem.card.rank);\n\n      // Find if player has a card that sums with dragged and target to 9\n      const neededValue = 9 - (targetRankValue + draggedRankValue);\n      const hasNeededCard = playerHand.some(c => rankValue(c.rank) === neededValue);\n\n      if (hasNeededCard) {\n        const buildConfirmed = window.confirm(`You can build 9 by combining ${draggedItem.card.rank}${draggedItem.card.suit} and ${targetCard.rank}${targetCard.suit} with a card of value ${neededValue}. Build?`);\n        if (buildConfirmed) {\n          // Call handleBuild from game-logic (to be implemented)\n          return handleBuild(currentGameState, draggedItem.card, targetCard, neededValue);\n        }\n      } else {\n        alert(\"You do not have the required card to build 9.\");\n      }\n\n      // For now, return current state unchanged\n      return currentGameState;\n    });\n  }, [rankValue]);\n\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item) => handleTrailCard(item.card, item.player),\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  }), [handleTrailCard]);\n\n  const isActive = isOver && canDrop;\n\n  return (\n    <div ref={drop} className={`game-board ${isActive ? 'active-drop' : ''}`}>\n      <div className=\"status-section\">\n        <p>Round: {gameState.round}</p>\n      </div>\n      <div className=\"captured-cards-section\">\n        {gameState.playerCaptures.map((capturedCards, index) => (\n          <CapturedCards key={index} player={index} cards={capturedCards} />\n        ))}\n      </div>\n      <div className=\"table-cards-section\">\n        <TableCards\n          cards={gameState.tableCards}\n          onDropOnCard={handleDropOnCard}\n        />\n      </div>\n      <div className=\"player-hands-section\">\n        {gameState.playerHands\n          .map((hand, index) => (\n            <PlayerHand\n              key={index}\n              player={index}\n              cards={hand}\n              isCurrent={gameState.currentPlayer === index}\n            />\n          ))}\n      </div>\n      {gameState.gameOver && (\n        <div className=\"game-over-section\">\n          <h2>Game Over</h2>\n          <p>Winner: Player {gameState.winner + 1}</p>\n          <button onClick={onRestart}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}