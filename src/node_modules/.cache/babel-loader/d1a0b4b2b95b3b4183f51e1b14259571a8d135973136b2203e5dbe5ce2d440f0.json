{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Desktop\\\\Linda Baloyi\\\\casino\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { initializeGame, handleDrop, handleBuild, handleCapture, isRoundOver, isGameOver, calculateScores, findValidCaptures } from './game-logic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initializeGame());\n  const handleDropCard = (card, player) => {\n    if (player !== gameState.currentPlayer) {\n      console.log(\"It's not your turn!\");\n      return;\n    }\n    let newGameState = {\n      ...gameState\n    };\n    let actionTaken = false;\n\n    // 1. Check for Capture\n    const possibleCaptures = findValidCaptures(card, gameState.tableCards);\n    if (possibleCaptures.length > 0) {\n      // For simplicity, take the first valid capture. In a real game, the player might choose.\n      newGameState = handleCapture(gameState, card, possibleCaptures[0]);\n      actionTaken = true;\n    }\n\n    // 2. Check for Build (if no capture was made)\n    if (!actionTaken) {\n      // Helper function to check if a build can be formed\n      const canFormBuild = (cardToBuild, tableCards) => {\n        const cardValue = cardToBuild.value;\n        // Check if any combination of table cards sums up to the cardValue\n        // This is a simplified check and might need more sophisticated logic for complex build rules\n        for (let i = 0; i < tableCards.length; i++) {\n          if (tableCards[i].value === cardValue) return [tableCards[i]];\n          for (let j = i + 1; j < tableCards.length; j++) {\n            if (tableCards[i].value + tableCards[j].value === cardValue) return [tableCards[i], tableCards[j]];\n          }\n        }\n        return null;\n      };\n      const buildCards = canFormBuild(card, gameState.tableCards);\n      if (buildCards) {\n        newGameState = handleBuild(gameState, card, buildCards);\n        actionTaken = true;\n      }\n    }\n\n    // 3. Default to Drop (if no capture or build was made)\n    if (!actionTaken) {\n      newGameState = handleDrop(gameState, card);\n    }\n    setGameState(newGameState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Round: \", gameState.round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Player: Player \", gameState.currentPlayer + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Scores: Player 1 (\", gameState.scores[0], \") - Player 2 (\", gameState.scores[1], \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards,\n        onDropCard: handleDropCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: gameState.playerHands.map((hand, index) => /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: index,\n        cards: hand,\n        isCurrent: gameState.currentPlayer === index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)).filter(playerHand => playerHand.props.isCurrent)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onRestart,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"ENK1g+vCzDU5cKkJDqhdquQtLoU=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","PlayerHand","TableCards","initializeGame","handleDrop","handleBuild","handleCapture","isRoundOver","isGameOver","calculateScores","findValidCaptures","jsxDEV","_jsxDEV","GameBoard","onRestart","_s","gameState","setGameState","handleDropCard","card","player","currentPlayer","console","log","newGameState","actionTaken","possibleCaptures","tableCards","length","canFormBuild","cardToBuild","cardValue","value","i","j","buildCards","className","children","round","fileName","_jsxFileName","lineNumber","columnNumber","scores","cards","onDropCard","playerHands","map","hand","index","isCurrent","filter","playerHand","props","gameOver","winner","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\n\nimport {\n  initializeGame,\n  handleDrop,\n  handleBuild,\n  handleCapture,\n  isRoundOver,\n  isGameOver,\n  calculateScores,\n  findValidCaptures,\n} from './game-logic';\n\nfunction GameBoard({ onRestart }) {\n  const [gameState, setGameState] = useState(initializeGame());\n\n  const handleDropCard = (card, player) => {\n    if (player !== gameState.currentPlayer) {\n      console.log(\"It's not your turn!\");\n      return;\n    }\n\n    let newGameState = { ...gameState };\n    let actionTaken = false;\n\n    // 1. Check for Capture\n    const possibleCaptures = findValidCaptures(card, gameState.tableCards);\n    if (possibleCaptures.length > 0) {\n      // For simplicity, take the first valid capture. In a real game, the player might choose.\n      newGameState = handleCapture(gameState, card, possibleCaptures[0]);\n      actionTaken = true;\n    }\n\n    // 2. Check for Build (if no capture was made)\n    if (!actionTaken) {\n      // Helper function to check if a build can be formed\n      const canFormBuild = (cardToBuild, tableCards) => {\n        const cardValue = cardToBuild.value;\n        // Check if any combination of table cards sums up to the cardValue\n        // This is a simplified check and might need more sophisticated logic for complex build rules\n        for (let i = 0; i < tableCards.length; i++) {\n          if (tableCards[i].value === cardValue) return [tableCards[i]];\n          for (let j = i + 1; j < tableCards.length; j++) {\n            if (tableCards[i].value + tableCards[j].value === cardValue) return [tableCards[i], tableCards[j]];\n          }\n        }\n        return null;\n      };\n\n      const buildCards = canFormBuild(card, gameState.tableCards);\n      if (buildCards) {\n        newGameState = handleBuild(gameState, card, buildCards);\n        actionTaken = true;\n      }\n    }\n\n    // 3. Default to Drop (if no capture or build was made)\n    if (!actionTaken) {\n      newGameState = handleDrop(gameState, card);\n    }\n\n    setGameState(newGameState);\n  };\n\n  return (\n    <div className=\"game-board\">\n      <div className=\"status-section\">\n        <p>Round: {gameState.round}</p>\n        <p>Current Player: Player {gameState.currentPlayer + 1}</p>\n        <p>Scores: Player 1 ({gameState.scores[0]}) - Player 2 ({gameState.scores[1]})</p>\n      </div>\n      <div className=\"table-cards-section\">\n        <TableCards\n          cards={gameState.tableCards}\n          onDropCard={handleDropCard}\n        />\n      </div>\n      <div className=\"player-hands-section\">\n        {gameState.playerHands.map((hand, index) => (\n          <PlayerHand\n            key={index}\n            player={index}\n            cards={hand}\n            isCurrent={gameState.currentPlayer === index}\n          />\n        ))\n        .filter(playerHand => playerHand.props.isCurrent)}\n      </div>\n      {gameState.gameOver && (\n        <div className=\"game-over-section\">\n          <h2>Game Over</h2>\n          <p>Winner: Player {gameState.winner + 1}</p>\n          <button onClick={onRestart}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}