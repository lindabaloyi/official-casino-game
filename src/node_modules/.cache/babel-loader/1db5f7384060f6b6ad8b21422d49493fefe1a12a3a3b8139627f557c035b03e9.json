{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Documents\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport DeckDisplay from './DeckDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  deck: [],\n  // will hold the 40 cards\n  tableCards: [],\n  playerHands: [[], []],\n  // two players\n  playerCaptures: [[], []],\n  // captured cards per player\n  currentPlayer: 0,\n  round: 1,\n  scores: [0, 0]\n  // Additional state as needed\n};\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [selectedTableCards, setSelectedTableCards] = useState([]);\n  const [selectedBuild, setSelectedBuild] = useState(null);\n  const [showActionPopup, setShowActionPopup] = useState(false);\n  const [draggedCard, setDraggedCard] = useState(null);\n  const [dropTarget, setDropTarget] = useState(null);\n\n  // Helper to get top card of opponent's captured pile\n  const getOpponentTopCapture = () => {\n    const opponent = (gameState.currentPlayer + 1) % 2;\n    const captures = gameState.playerCaptures[opponent];\n    if (captures.length === 0) return null;\n    return captures[captures.length - 1];\n  };\n  useEffect(() => {\n    // Initialize deck and deal cards here\n    const suits = ['♠', '♥', '♦', '♣'];\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n\n    // Create deck of 40 cards\n    let deck = [];\n    for (let suit of suits) {\n      for (let rank of ranks) {\n        deck.push({\n          suit,\n          rank\n        });\n      }\n    }\n\n    // Shuffle deck\n    for (let i = deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n\n    // Deal 10 cards to each player for round 1\n    const playerHands = [[], []];\n    for (let i = 0; i < 10; i++) {\n      playerHands[0].push(deck.pop());\n      playerHands[1].push(deck.pop());\n    }\n\n    // Set initial table cards empty as no player has played yet\n    const tableCards = [];\n    setGameState(prev => ({\n      ...prev,\n      deck,\n      playerHands,\n      tableCards,\n      currentPlayer: 0,\n      round: 1,\n      playerCaptures: [[], []],\n      scores: [0, 0]\n    }));\n    setSelectedCard(null);\n  }, []);\n  const handleAction = action => {\n    console.log('Action chosen:', action);\n    switch (action) {\n      case 'drop':\n        handleDrop();\n        break;\n      case 'build':\n        handleBuild();\n        break;\n      case 'capture':\n        handleCapture();\n        break;\n      default:\n        console.warn('Unknown action:', action);\n    }\n  };\n\n  // Check if round is over: no cards in deck and both players have empty hands\n  const isRoundOver = () => {\n    const noCardsInDeck = gameState.deck.length === 0;\n    const noCardsInHands = gameState.playerHands.every(hand => hand.length === 0);\n    return noCardsInDeck && noCardsInHands;\n  };\n\n  // Start next round or end game\n  const handleRoundEnd = () => {\n    // Helper function to calculate score for a player's captured cards\n    const calculateScore = capturedCards => {\n      let score = 0;\n      capturedCards.forEach(card => {\n        if (!card.rank || !card.suit) return; // skip builds or invalid cards\n        if (card.rank === 'A') score += 1;\n        if (card.rank === '2' && card.suit === '♠') score += 1;\n        if (card.rank === '10' && card.suit === '♦') score += 2;\n      });\n      return score;\n    };\n    if (gameState.round === 1) {\n      // Reshuffle and redeal for round 2\n      let newDeck = [...gameState.playerCaptures[0], ...gameState.playerCaptures[1], ...gameState.tableCards];\n      // Clear captures and table cards\n      const playerCaptures = [[], []];\n      const tableCards = [];\n      // Shuffle new deck\n      for (let i = newDeck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n      }\n      // Deal 10 cards to each player\n      const playerHands = [[], []];\n      for (let i = 0; i < 10; i++) {\n        playerHands[0].push(newDeck.pop());\n        playerHands[1].push(newDeck.pop());\n      }\n      // Set 4 cards on table\n      for (let i = 0; i < 4; i++) {\n        tableCards.push(newDeck.pop());\n      }\n      setGameState(prev => ({\n        ...prev,\n        deck: newDeck,\n        playerHands,\n        playerCaptures,\n        tableCards,\n        round: 2,\n        currentPlayer: 0\n      }));\n    } else {\n      // Round 2 ended, game over - calculate final scores and determine winner\n      const scores = [calculateScore(gameState.playerCaptures[0]), calculateScore(gameState.playerCaptures[1])];\n\n      // Bonus for most captured cards\n      const capturesCount = [gameState.playerCaptures[0].length, gameState.playerCaptures[1].length];\n      if (capturesCount[0] > capturesCount[1]) {\n        scores[0] += 3; // bonus points for most cards\n      } else if (capturesCount[1] > capturesCount[0]) {\n        scores[1] += 3;\n      }\n      let winner = null;\n      if (scores[0] > scores[1]) winner = 0;else if (scores[1] > scores[0]) winner = 1;else winner = 'draw';\n      setGameState(prev => ({\n        ...prev,\n        scores,\n        gameOver: true,\n        winner\n      }));\n    }\n  };\n\n  // Wrap setGameState to include round end check and turn switch\n  const updateGameStateAfterAction = newState => {\n    if (isRoundOver()) {\n      handleRoundEnd();\n    } else {\n      setGameState(newState);\n    }\n    setSelectedCard(null);\n  };\n\n  // Helper to convert rank to numeric value for ordering\n  const rankValue = rank => {\n    if (rank === 'A') return 1;\n    if (rank === 'J') return 11;\n    if (rank === 'Q') return 12;\n    if (rank === 'K') return 13;\n    return parseInt(rank, 10);\n  };\n  const handleDrop = cardParam => {\n    console.log('Drop action triggered');\n    const cardToDrop = cardParam || selectedCard;\n    if (!cardToDrop) {\n      alert('Please select a card to drop.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n\n    // Check if selectedCard is in player's hand\n    const cardIndex = playerHand.findIndex(c => c.rank === cardToDrop.rank && c.suit === cardToDrop.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    // Remove card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n\n    // Check if cardToDrop matches any card on table to stack\n    const tableCards = [...gameState.tableCards];\n    let stackIndex = -1;\n    for (let i = 0; i < tableCards.length; i++) {\n      const tableCard = tableCards[i];\n      if (tableCard.type === 'stack' || tableCard.type === 'build') {\n        // Check if cardToDrop rank matches any card in stack or build\n        if (tableCard.cards.some(c => c.rank === cardToDrop.rank)) {\n          stackIndex = i;\n          break;\n        }\n      } else {\n        // Loose card\n        if (tableCard.rank === cardToDrop.rank) {\n          stackIndex = i;\n          break;\n        }\n      }\n    }\n    if (stackIndex === -1) {\n      // No matching card, add as loose card\n      tableCards.push(cardToDrop);\n    } else {\n      // Matching card found, create or update stack/build\n      const existing = tableCards[stackIndex];\n      let cardsInStack = [];\n      if (existing.type === 'stack' || existing.type === 'build') {\n        cardsInStack = [...existing.cards];\n      } else {\n        cardsInStack = [existing];\n      }\n      // Add new card\n      cardsInStack.push(cardToDrop);\n\n      // Sort cards by rank ascending (lower rank on top)\n      cardsInStack.sort((a, b) => rankValue(a.rank) - rankValue(b.rank));\n      if (existing.type === 'build') {\n        // Recalculate buildValue as sum of ranks\n        const rankToValue = rank => {\n          if (rank === 'A') return 1;\n          if (rank === 'J') return 11;\n          if (rank === 'Q') return 12;\n          if (rank === 'K') return 13;\n          return parseInt(rank, 10);\n        };\n        const sum = cardsInStack.reduce((acc, card) => acc + rankToValue(card.rank), 0);\n        // Create new build stack object with updated cards and buildValue\n        const newBuildStack = {\n          ...existing,\n          cards: cardsInStack,\n          buildValue: sum\n        };\n        tableCards[stackIndex] = newBuildStack;\n      } else {\n        // Create new stack object\n        const newStack = {\n          type: 'stack',\n          cards: cardsInStack\n        };\n        tableCards[stackIndex] = newStack;\n      }\n    }\n\n    // Update state and clear selected card, switch turn, check round end\n    updateGameStateAfterAction({\n      ...gameState,\n      playerHands: newPlayerHands,\n      tableCards,\n      currentPlayer: (currentPlayer + 1) % 2\n    });\n  };\n  const handleSelectTableCard = card => {\n    setSelectedTableCards(prev => {\n      // if card is already selected, deselect it\n      if (prev.find(c => c.rank === card.rank && c.suit === card.suit)) {\n        return prev.filter(c => c.rank !== card.rank || c.suit !== card.suit);\n      }\n      // otherwise, add it to the selection\n      return [...prev, card];\n    });\n  };\n  const handleBuild = () => {\n    console.log('Build action triggered');\n    if (!selectedCard) {\n      alert('Please select a card from your hand to build with.');\n      return;\n    }\n    if (selectedTableCards.length === 0) {\n      alert('Please select one or more cards from the table to build with.');\n      return;\n    }\n    const buildValueStr = prompt('Enter the value of the build you want to create:');\n    if (!buildValueStr) {\n      return; // User cancelled the prompt\n    }\n    const buildValue = parseInt(buildValueStr, 10);\n    if (isNaN(buildValue)) {\n      alert('Invalid build value.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const allCardsForBuild = [...selectedTableCards, selectedCard];\n    const sumOfCards = allCardsForBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n    if (sumOfCards !== buildValue) {\n      alert(`The sum of the selected cards (${sumOfCards}) does not match the desired build value (${buildValue}).`);\n      return;\n    }\n\n    // Remove selected card from player's hand\n    const cardIndexInHand = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndexInHand), ...playerHand.slice(cardIndexInHand + 1)];\n\n    // Remove selected cards from table\n    const newTableCards = gameState.tableCards.filter(tableCard => !selectedTableCards.some(selected => selected.rank === tableCard.rank && selected.suit === tableCard.suit));\n\n    // Create new build object\n    const newBuild = {\n      type: 'build',\n      cards: allCardsForBuild.sort((a, b) => rankValue(a.rank) - rankValue(b.rank)),\n      buildValue: buildValue,\n      owner: currentPlayer,\n      hasBase: allCardsForBuild.some(card => rankValue(card.rank) === buildValue) // if a card in the build has the rank of the build value, it's a based build\n    };\n    newTableCards.push(newBuild);\n\n    // Update state\n    setGameState(prev => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      currentPlayer: (currentPlayer + 1) % 2\n    }));\n    setSelectedCard(null);\n    setSelectedTableCards([]);\n  };\n\n  // Helper function to find valid captures for a given card\n  const findValidCaptures = (card, tableCards) => {\n    // Flatten table cards into individual cards and builds\n    // For simplicity, consider loose cards and builds separately\n    const captures = [];\n\n    // Helper to get numeric value of rank for comparison\n    const rankValue = rank => {\n      if (rank === 'A') return 1;\n      if (rank === 'J') return 11;\n      if (rank === 'Q') return 12;\n      if (rank === 'K') return 13;\n      return parseInt(rank, 10);\n    };\n    const cardValue = rankValue(card.rank);\n\n    // Check loose cards for capture (matching rank)\n    const looseCards = tableCards.filter(c => !c.type);\n    looseCards.forEach(tableCard => {\n      if (rankValue(tableCard.rank) === cardValue) {\n        captures.push([tableCard]);\n      }\n    });\n\n    // Check builds for capture (owner must be current player, baseValue matches card)\n    const buildCaptures = tableCards.filter(c => c.type === 'build' && c.baseValue === card.rank);\n    buildCaptures.forEach(build => {\n      captures.push(build.cards);\n    });\n\n    // TODO: Implement logic to find combinations of cards that sum to cardValue for capture\n\n    return captures;\n  };\n  const handleCapture = () => {\n    console.log('Capture action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to capture with.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    const validCaptures = findValidCaptures(selectedCard, gameState.tableCards);\n    if (validCaptures.length === 0) {\n      alert('No valid captures available with selected card.');\n      return;\n    }\n\n    // Auto-select largest capture combo\n    let largestCapture = validCaptures[0];\n    validCaptures.forEach(capture => {\n      if (capture.length > largestCapture.length) {\n        largestCapture = capture;\n      }\n    });\n\n    // Remove captured cards from table\n    const newTableCards = gameState.tableCards.filter(c => {\n      if (c.type === 'build') {\n        // Remove build if all cards are captured\n        return !largestCapture.every(card => c.cards.some(bc => bc.rank === card.rank && bc.suit === card.suit));\n      } else {\n        // Loose card\n        return !largestCapture.some(card => card.rank === c.rank && card.suit === c.suit);\n      }\n    });\n\n    // Remove selected card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n\n    // Add captured cards and selected card to player's captures\n    const newPlayerCaptures = [...gameState.playerCaptures];\n    newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...largestCapture, selectedCard];\n\n    // Update state and clear selected card, switch turn\n    setGameState(prev => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      playerCaptures: newPlayerCaptures,\n      currentPlayer: (currentPlayer + 1) % 2\n    }));\n    setSelectedCard(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      style: {\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px',\n        display: 'flex',\n        flexWrap: 'wrap',\n        gap: '20px',\n        justifyContent: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Player 1 Captured Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), gameState.playerCaptures[0].length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-container\",\n          style: {\n            position: 'relative',\n            width: '80px',\n            height: '120px'\n          },\n          children: gameState.playerCaptures[0].length > 0 && (() => {\n            const card = gameState.playerCaptures[0][gameState.playerCaptures[0].length - 1];\n            const color = ['♥', '♦'].includes(card.suit) ? 'red' : 'black';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              draggable: true,\n              onDragStart: e => {\n                e.dataTransfer.setData('text/plain', JSON.stringify(card));\n                setDraggedCard(card);\n              },\n              style: {\n                cursor: 'grab',\n                color\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-rank\",\n                children: card.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-suit\",\n                children: card.suit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 21\n              }, this)]\n            }, card.rank + card.suit, true, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 19\n            }, this);\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No captured cards yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Player 2 Captured Cards\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), gameState.playerCaptures[1].length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cards-container\",\n          style: {\n            position: 'relative',\n            width: '80px',\n            height: '120px'\n          },\n          children: gameState.playerCaptures[1].length > 0 && (() => {\n            const card = gameState.playerCaptures[1][gameState.playerCaptures[1].length - 1];\n            const color = ['♥', '♦'].includes(card.suit) ? 'red' : 'black';\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card\",\n              draggable: true,\n              onDragStart: e => {\n                e.dataTransfer.setData('text/plain', JSON.stringify(card));\n                setDraggedCard(card);\n              },\n              style: {\n                cursor: 'grab',\n                color\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-rank\",\n                children: card.rank\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-suit\",\n                children: card.suit\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 21\n              }, this)]\n            }, card.rank + card.suit, true, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 19\n            }, this);\n          })()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No captured cards yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      onDragOver: e => {\n        e.preventDefault();\n      },\n      onDrop: e => {\n        e.preventDefault();\n        if (!draggedCard) return;\n\n        // Check if draggedCard is already on the table\n        const isDraggedCardOnTable = gameState.tableCards.some(tableCard => {\n          if (tableCard.type === 'stack') {\n            return tableCard.cards.some(c => c.rank === draggedCard.rank && c.suit === draggedCard.suit);\n          } else {\n            return tableCard.rank === draggedCard.rank && tableCard.suit === draggedCard.suit;\n          }\n        });\n\n        // Check if dropped card matches any card on table for capture/build options\n        const matches = gameState.tableCards.some(tableCard => {\n          if (tableCard.type === 'build') {\n            return tableCard.baseValue === draggedCard.rank;\n          } else {\n            return tableCard.rank === draggedCard.rank;\n          }\n        });\n        setSelectedCard(draggedCard);\n        setDropTarget('table');\n\n        // Show popup only if card is not already on table and matches another card\n        if (!isDraggedCardOnTable && matches) {\n          setShowActionPopup(true);\n        } else {\n          // If no match or dragging table card alone, just drop (place card on table)\n          handleDrop(draggedCard);\n        }\n        setDraggedCard(null);\n      },\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards,\n        onDragStart: setDraggedCard,\n        selectedTableCards: selectedTableCards,\n        onSelectTableCard: handleSelectTableCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      style: {\n        marginTop: '40px'\n      },\n      children: gameState.currentPlayer === 0 ? /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: 0,\n        cards: gameState.playerHands[0],\n        isCurrent: true,\n        selectedCard: selectedCard,\n        onSelectCard: setSelectedCard,\n        onDragStart: (e, card) => {\n          setDraggedCard(card);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: 1,\n        cards: gameState.playerHands[1],\n        isCurrent: true,\n        selectedCard: selectedCard,\n        onSelectCard: setSelectedCard,\n        onDragStart: (e, card) => {\n          setDraggedCard(card);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 7\n    }, this), showActionPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"action-popup\",\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: 'white',\n        border: '2px solid black',\n        borderRadius: '8px',\n        padding: '20px',\n        zIndex: 1000,\n        boxShadow: '0 4px 8px rgba(0,0,0,0.3)'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Choose Action\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Card: \", selectedCard.rank, selectedCard.suit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleBuild();\n          setShowActionPopup(false);\n        },\n        disabled: gameState.gameOver,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Build Base\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          // For build on top, we can extend handleBuild with a param if needed\n          handleBuild();\n          setShowActionPopup(false);\n        },\n        disabled: gameState.gameOver,\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Build On Top\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          handleCapture();\n          setShowActionPopup(false);\n        },\n        disabled: gameState.gameOver,\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setShowActionPopup(false);\n          setSelectedCard(null);\n        },\n        style: {\n          marginLeft: '10px'\n        },\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 9\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Final Scores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Player 1: \", gameState.scores[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Player 2: \", gameState.scores[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 11\n      }, this), gameState.winner === 'draw' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The game is a draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 484,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"LPCS6vABMXVQ1/vLwe1q0/wZIAo=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","TableCards","DeckDisplay","jsxDEV","_jsxDEV","initialGameState","deck","tableCards","playerHands","playerCaptures","currentPlayer","round","scores","GameBoard","onRestart","_s","gameState","setGameState","selectedCard","setSelectedCard","selectedTableCards","setSelectedTableCards","selectedBuild","setSelectedBuild","showActionPopup","setShowActionPopup","draggedCard","setDraggedCard","dropTarget","setDropTarget","getOpponentTopCapture","opponent","captures","length","suits","ranks","suit","rank","push","i","j","Math","floor","random","pop","prev","handleAction","action","console","log","handleDrop","handleBuild","handleCapture","warn","isRoundOver","noCardsInDeck","noCardsInHands","every","hand","handleRoundEnd","calculateScore","capturedCards","score","forEach","card","newDeck","capturesCount","winner","gameOver","updateGameStateAfterAction","newState","rankValue","parseInt","cardParam","cardToDrop","alert","playerHand","cardIndex","findIndex","c","newPlayerHands","slice","stackIndex","tableCard","type","cards","some","existing","cardsInStack","sort","a","b","rankToValue","sum","reduce","acc","newBuildStack","buildValue","newStack","handleSelectTableCard","find","filter","buildValueStr","prompt","isNaN","allCardsForBuild","sumOfCards","cardIndexInHand","newTableCards","selected","newBuild","owner","hasBase","findValidCaptures","cardValue","looseCards","buildCaptures","baseValue","build","validCaptures","largestCapture","capture","bc","newPlayerCaptures","className","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","flexWrap","gap","justifyContent","position","width","height","color","includes","draggable","onDragStart","e","dataTransfer","setData","JSON","stringify","cursor","onDragOver","preventDefault","onDrop","isDraggedCardOnTable","matches","onSelectTableCard","marginTop","player","isCurrent","onSelectCard","top","left","transform","backgroundColor","border","borderRadius","padding","zIndex","boxShadow","onClick","disabled","marginRight","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/LB/Documents/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport DeckDisplay from './DeckDisplay';\n\nconst initialGameState = {\n  deck: [], // will hold the 40 cards\n  tableCards: [],\n  playerHands: [[], []], // two players\n  playerCaptures: [[], []], // captured cards per player\n  currentPlayer: 0,\n  round: 1,\n  scores: [0, 0],\n  // Additional state as needed\n};\n\nfunction GameBoard({ onRestart }) {\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedCard, setSelectedCard] = useState(null);\n  const [selectedTableCards, setSelectedTableCards] = useState([]);\n  const [selectedBuild, setSelectedBuild] = useState(null);\n  const [showActionPopup, setShowActionPopup] = useState(false);\n  const [draggedCard, setDraggedCard] = useState(null);\n  const [dropTarget, setDropTarget] = useState(null);\n\n  // Helper to get top card of opponent's captured pile\n  const getOpponentTopCapture = () => {\n    const opponent = (gameState.currentPlayer + 1) % 2;\n    const captures = gameState.playerCaptures[opponent];\n    if (captures.length === 0) return null;\n    return captures[captures.length - 1];\n  };\n\n  useEffect(() => {\n    // Initialize deck and deal cards here\n    const suits = ['♠', '♥', '♦', '♣'];\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n\n    // Create deck of 40 cards\n    let deck = [];\n    for (let suit of suits) {\n      for (let rank of ranks) {\n        deck.push({ suit, rank });\n      }\n    }\n\n    // Shuffle deck\n    for (let i = deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n\n    // Deal 10 cards to each player for round 1\n    const playerHands = [[], []];\n    for (let i = 0; i < 10; i++) {\n      playerHands[0].push(deck.pop());\n      playerHands[1].push(deck.pop());\n    }\n\n    // Set initial table cards empty as no player has played yet\n    const tableCards = [];\n\n    setGameState((prev) => ({\n      ...prev,\n      deck,\n      playerHands,\n      tableCards,\n      currentPlayer: 0,\n      round: 1,\n      playerCaptures: [[], []],\n      scores: [0, 0],\n    }));\n    setSelectedCard(null);\n  }, []);\n\n  const handleAction = (action) => {\n    console.log('Action chosen:', action);\n    switch (action) {\n      case 'drop':\n        handleDrop();\n        break;\n      case 'build':\n        handleBuild();\n        break;\n      case 'capture':\n        handleCapture();\n        break;\n      default:\n        console.warn('Unknown action:', action);\n    }\n  };\n\n  // Check if round is over: no cards in deck and both players have empty hands\n  const isRoundOver = () => {\n    const noCardsInDeck = gameState.deck.length === 0;\n    const noCardsInHands = gameState.playerHands.every((hand) => hand.length === 0);\n    return noCardsInDeck && noCardsInHands;\n  };\n\n  // Start next round or end game\n  const handleRoundEnd = () => {\n    // Helper function to calculate score for a player's captured cards\n    const calculateScore = (capturedCards) => {\n      let score = 0;\n      capturedCards.forEach((card) => {\n        if (!card.rank || !card.suit) return; // skip builds or invalid cards\n        if (card.rank === 'A') score += 1;\n        if (card.rank === '2' && card.suit === '♠') score += 1;\n        if (card.rank === '10' && card.suit === '♦') score += 2;\n      });\n      return score;\n    };\n\n    if (gameState.round === 1) {\n      // Reshuffle and redeal for round 2\n      let newDeck = [...gameState.playerCaptures[0], ...gameState.playerCaptures[1], ...gameState.tableCards];\n      // Clear captures and table cards\n      const playerCaptures = [[], []];\n      const tableCards = [];\n      // Shuffle new deck\n      for (let i = newDeck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n      }\n      // Deal 10 cards to each player\n      const playerHands = [[], []];\n      for (let i = 0; i < 10; i++) {\n        playerHands[0].push(newDeck.pop());\n        playerHands[1].push(newDeck.pop());\n      }\n      // Set 4 cards on table\n      for (let i = 0; i < 4; i++) {\n        tableCards.push(newDeck.pop());\n      }\n      setGameState((prev) => ({\n        ...prev,\n        deck: newDeck,\n        playerHands,\n        playerCaptures,\n        tableCards,\n        round: 2,\n        currentPlayer: 0,\n      }));\n    } else {\n      // Round 2 ended, game over - calculate final scores and determine winner\n      const scores = [\n        calculateScore(gameState.playerCaptures[0]),\n        calculateScore(gameState.playerCaptures[1]),\n      ];\n\n      // Bonus for most captured cards\n      const capturesCount = [\n        gameState.playerCaptures[0].length,\n        gameState.playerCaptures[1].length,\n      ];\n      if (capturesCount[0] > capturesCount[1]) {\n        scores[0] += 3; // bonus points for most cards\n      } else if (capturesCount[1] > capturesCount[0]) {\n        scores[1] += 3;\n      }\n\n      let winner = null;\n      if (scores[0] > scores[1]) winner = 0;\n      else if (scores[1] > scores[0]) winner = 1;\n      else winner = 'draw';\n\n      setGameState((prev) => ({\n        ...prev,\n        scores,\n        gameOver: true,\n        winner,\n      }));\n    }\n  };\n\n  // Wrap setGameState to include round end check and turn switch\n  const updateGameStateAfterAction = (newState) => {\n    if (isRoundOver()) {\n      handleRoundEnd();\n    } else {\n      setGameState(newState);\n    }\n    setSelectedCard(null);\n  };\n\n  // Helper to convert rank to numeric value for ordering\n  const rankValue = (rank) => {\n    if (rank === 'A') return 1;\n    if (rank === 'J') return 11;\n    if (rank === 'Q') return 12;\n    if (rank === 'K') return 13;\n    return parseInt(rank, 10);\n  };\n\n  const handleDrop = (cardParam) => {\n    console.log('Drop action triggered');\n    const cardToDrop = cardParam || selectedCard;\n    if (!cardToDrop) {\n      alert('Please select a card to drop.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n\n    // Check if selectedCard is in player's hand\n    const cardIndex = playerHand.findIndex(\n      (c) => c.rank === cardToDrop.rank && c.suit === cardToDrop.suit\n    );\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    // Remove card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [\n      ...playerHand.slice(0, cardIndex),\n      ...playerHand.slice(cardIndex + 1),\n    ];\n\n    // Check if cardToDrop matches any card on table to stack\n    const tableCards = [...gameState.tableCards];\n    let stackIndex = -1;\n    for (let i = 0; i < tableCards.length; i++) {\n      const tableCard = tableCards[i];\n      if (tableCard.type === 'stack' || tableCard.type === 'build') {\n        // Check if cardToDrop rank matches any card in stack or build\n        if (tableCard.cards.some(c => c.rank === cardToDrop.rank)) {\n          stackIndex = i;\n          break;\n        }\n      } else {\n        // Loose card\n        if (tableCard.rank === cardToDrop.rank) {\n          stackIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (stackIndex === -1) {\n      // No matching card, add as loose card\n      tableCards.push(cardToDrop);\n    } else {\n      // Matching card found, create or update stack/build\n      const existing = tableCards[stackIndex];\n      let cardsInStack = [];\n      if (existing.type === 'stack' || existing.type === 'build') {\n        cardsInStack = [...existing.cards];\n      } else {\n        cardsInStack = [existing];\n      }\n      // Add new card\n      cardsInStack.push(cardToDrop);\n\n      // Sort cards by rank ascending (lower rank on top)\n      cardsInStack.sort((a, b) => rankValue(a.rank) - rankValue(b.rank));\n\n      if (existing.type === 'build') {\n        // Recalculate buildValue as sum of ranks\n        const rankToValue = (rank) => {\n          if (rank === 'A') return 1;\n          if (rank === 'J') return 11;\n          if (rank === 'Q') return 12;\n          if (rank === 'K') return 13;\n          return parseInt(rank, 10);\n        };\n        const sum = cardsInStack.reduce((acc, card) => acc + rankToValue(card.rank), 0);\n        // Create new build stack object with updated cards and buildValue\n        const newBuildStack = {\n          ...existing,\n          cards: cardsInStack,\n          buildValue: sum,\n        };\n        tableCards[stackIndex] = newBuildStack;\n      } else {\n        // Create new stack object\n        const newStack = {\n          type: 'stack',\n          cards: cardsInStack,\n        };\n        tableCards[stackIndex] = newStack;\n      }\n    }\n\n    // Update state and clear selected card, switch turn, check round end\n    updateGameStateAfterAction({\n      ...gameState,\n      playerHands: newPlayerHands,\n      tableCards,\n      currentPlayer: (currentPlayer + 1) % 2,\n    });\n  };\n\n  const handleSelectTableCard = (card) => {\n    setSelectedTableCards((prev) => {\n      // if card is already selected, deselect it\n      if (prev.find((c) => c.rank === card.rank && c.suit === card.suit)) {\n        return prev.filter((c) => c.rank !== card.rank || c.suit !== card.suit);\n      }\n      // otherwise, add it to the selection\n      return [...prev, card];\n    });\n  };\n\n  const handleBuild = () => {\n    console.log('Build action triggered');\n    if (!selectedCard) {\n      alert('Please select a card from your hand to build with.');\n      return;\n    }\n    if (selectedTableCards.length === 0) {\n      alert('Please select one or more cards from the table to build with.');\n      return;\n    }\n\n    const buildValueStr = prompt('Enter the value of the build you want to create:');\n    if (!buildValueStr) {\n        return; // User cancelled the prompt\n    }\n    const buildValue = parseInt(buildValueStr, 10);\n    if (isNaN(buildValue)) {\n        alert('Invalid build value.');\n        return;\n    }\n\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n\n    const allCardsForBuild = [...selectedTableCards, selectedCard];\n    const sumOfCards = allCardsForBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n    if (sumOfCards !== buildValue) {\n      alert(`The sum of the selected cards (${sumOfCards}) does not match the desired build value (${buildValue}).`);\n      return;\n    }\n\n    // Remove selected card from player's hand\n    const cardIndexInHand = playerHand.findIndex(\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\n    );\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [\n      ...playerHand.slice(0, cardIndexInHand),\n      ...playerHand.slice(cardIndexInHand + 1),\n    ];\n\n    // Remove selected cards from table\n    const newTableCards = gameState.tableCards.filter(\n      (tableCard) =>\n        !selectedTableCards.some(\n          (selected) => selected.rank === tableCard.rank && selected.suit === tableCard.suit\n        )\n    );\n\n    // Create new build object\n    const newBuild = {\n      type: 'build',\n      cards: allCardsForBuild.sort((a, b) => rankValue(a.rank) - rankValue(b.rank)),\n      buildValue: buildValue,\n      owner: currentPlayer,\n      hasBase: allCardsForBuild.some(card => rankValue(card.rank) === buildValue), // if a card in the build has the rank of the build value, it's a based build\n    };\n\n    newTableCards.push(newBuild);\n\n    // Update state\n    setGameState((prev) => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      currentPlayer: (currentPlayer + 1) % 2,\n    }));\n\n    setSelectedCard(null);\n    setSelectedTableCards([]);\n  };\n\n  // Helper function to find valid captures for a given card\n  const findValidCaptures = (card, tableCards) => {\n    // Flatten table cards into individual cards and builds\n    // For simplicity, consider loose cards and builds separately\n    const captures = [];\n\n    // Helper to get numeric value of rank for comparison\n    const rankValue = (rank) => {\n      if (rank === 'A') return 1;\n      if (rank === 'J') return 11;\n      if (rank === 'Q') return 12;\n      if (rank === 'K') return 13;\n      return parseInt(rank, 10);\n    };\n\n    const cardValue = rankValue(card.rank);\n\n    // Check loose cards for capture (matching rank)\n    const looseCards = tableCards.filter((c) => !c.type);\n    looseCards.forEach((tableCard) => {\n      if (rankValue(tableCard.rank) === cardValue) {\n        captures.push([tableCard]);\n      }\n    });\n\n    // Check builds for capture (owner must be current player, baseValue matches card)\n    const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.baseValue === card.rank);\n    buildCaptures.forEach((build) => {\n      captures.push(build.cards);\n    });\n\n    // TODO: Implement logic to find combinations of cards that sum to cardValue for capture\n\n    return captures;\n  };\n\n  const handleCapture = () => {\n    console.log('Capture action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to capture with.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const cardIndex = playerHand.findIndex(\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\n    );\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n\n    const validCaptures = findValidCaptures(selectedCard, gameState.tableCards);\n    if (validCaptures.length === 0) {\n      alert('No valid captures available with selected card.');\n      return;\n    }\n\n    // Auto-select largest capture combo\n    let largestCapture = validCaptures[0];\n    validCaptures.forEach((capture) => {\n      if (capture.length > largestCapture.length) {\n        largestCapture = capture;\n      }\n    });\n\n    // Remove captured cards from table\n    const newTableCards = gameState.tableCards.filter((c) => {\n      if (c.type === 'build') {\n        // Remove build if all cards are captured\n        return !largestCapture.every((card) =>\n          c.cards.some((bc) => bc.rank === card.rank && bc.suit === card.suit)\n        );\n      } else {\n        // Loose card\n        return !largestCapture.some((card) => card.rank === c.rank && card.suit === c.suit);\n      }\n    });\n\n    // Remove selected card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [\n      ...playerHand.slice(0, cardIndex),\n      ...playerHand.slice(cardIndex + 1),\n    ];\n\n    // Add captured cards and selected card to player's captures\n    const newPlayerCaptures = [...gameState.playerCaptures];\n    newPlayerCaptures[currentPlayer] = [\n      ...newPlayerCaptures[currentPlayer],\n      ...largestCapture,\n      selectedCard,\n    ];\n\n    // Update state and clear selected card, switch turn\n    setGameState((prev) => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      playerCaptures: newPlayerCaptures,\n      currentPlayer: (currentPlayer + 1) % 2,\n    }));\n    setSelectedCard(null);\n  };\n\n  return (\n    <div className=\"game-board\">\n      <div className=\"status-section\" style={{ marginBottom: '10px' }}>\n      </div>\n      <div style={{ marginBottom: '10px', display: 'flex', flexWrap: 'wrap', gap: '20px', justifyContent: 'center' }}>\n        <div>\n          <h4>Player 1 Captured Cards</h4>\n          {gameState.playerCaptures[0].length > 0 ? (\n            <div className=\"cards-container\" style={{ position: 'relative', width: '80px', height: '120px' }}>\n              {gameState.playerCaptures[0].length > 0 && (() => {\n                const card = gameState.playerCaptures[0][gameState.playerCaptures[0].length - 1];\n                const color = ['♥', '♦'].includes(card.suit) ? 'red' : 'black';\n                return (\n                  <div\n                    key={card.rank + card.suit}\n                    className=\"card\"\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData('text/plain', JSON.stringify(card));\n                      setDraggedCard(card);\n                    }}\n                    style={{\n                      cursor: 'grab',\n                      color,\n                    }}\n                  >\n                    <div className=\"card-rank\">{card.rank}</div>\n                    <div className=\"card-suit\">{card.suit}</div>\n                  </div>\n                );\n              })()}\n            </div>\n          ) : (\n            <p>No captured cards yet</p>\n          )}\n        </div>\n        <div>\n          <h4>Player 2 Captured Cards</h4>\n          {gameState.playerCaptures[1].length > 0 ? (\n            <div className=\"cards-container\" style={{ position: 'relative', width: '80px', height: '120px' }}>\n              {gameState.playerCaptures[1].length > 0 && (() => {\n                const card = gameState.playerCaptures[1][gameState.playerCaptures[1].length - 1];\n                const color = ['♥', '♦'].includes(card.suit) ? 'red' : 'black';\n                return (\n                  <div\n                    key={card.rank + card.suit}\n                    className=\"card\"\n                    draggable\n                    onDragStart={(e) => {\n                      e.dataTransfer.setData('text/plain', JSON.stringify(card));\n                      setDraggedCard(card);\n                    }}\n                    style={{\n                      cursor: 'grab',\n                      color,\n                    }}\n                  >\n                    <div className=\"card-rank\">{card.rank}</div>\n                    <div className=\"card-suit\">{card.suit}</div>\n                  </div>\n                );\n              })()}\n            </div>\n          ) : (\n            <p>No captured cards yet</p>\n          )}\n        </div>\n      </div>\n      <div\n        className=\"table-cards-section\"\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n        onDrop={(e) => {\n          e.preventDefault();\n          if (!draggedCard) return;\n\n          // Check if draggedCard is already on the table\n          const isDraggedCardOnTable = gameState.tableCards.some((tableCard) => {\n            if (tableCard.type === 'stack') {\n              return tableCard.cards.some(c => c.rank === draggedCard.rank && c.suit === draggedCard.suit);\n            } else {\n              return tableCard.rank === draggedCard.rank && tableCard.suit === draggedCard.suit;\n            }\n          });\n\n          // Check if dropped card matches any card on table for capture/build options\n          const matches = gameState.tableCards.some((tableCard) => {\n            if (tableCard.type === 'build') {\n              return tableCard.baseValue === draggedCard.rank;\n            } else {\n              return tableCard.rank === draggedCard.rank;\n            }\n          });\n\n          setSelectedCard(draggedCard);\n          setDropTarget('table');\n\n          // Show popup only if card is not already on table and matches another card\n          if (!isDraggedCardOnTable && matches) {\n            setShowActionPopup(true);\n          } else {\n            // If no match or dragging table card alone, just drop (place card on table)\n            handleDrop(draggedCard);\n          }\n          setDraggedCard(null);\n        }}\n      >\n        <TableCards cards={gameState.tableCards} onDragStart={setDraggedCard} selectedTableCards={selectedTableCards} onSelectTableCard={handleSelectTableCard} />\n      </div>\n      <div className=\"player-hands-section\" style={{ marginTop: '40px' }}>\n        {gameState.currentPlayer === 0 ? (\n          <PlayerHand\n            player={0}\n            cards={gameState.playerHands[0]}\n            isCurrent={true}\n            selectedCard={selectedCard}\n            onSelectCard={setSelectedCard}\n            onDragStart={(e, card) => {\n              setDraggedCard(card);\n            }}\n          />\n        ) : (\n          <PlayerHand\n            player={1}\n            cards={gameState.playerHands[1]}\n            isCurrent={true}\n            selectedCard={selectedCard}\n            onSelectCard={setSelectedCard}\n            onDragStart={(e, card) => {\n              setDraggedCard(card);\n            }}\n          />\n        )}\n      </div>\n      {/* Removed action buttons for drag-and-drop interaction */}\n      {/* <div className=\"actions-section\">\n        <h3>Actions</h3>\n        <button onClick={() => handleAction('drop')} disabled={gameState.gameOver}>Drop (D)</button>\n        <button onClick={() => handleAction('build')} disabled={gameState.gameOver}>Build (B)</button>\n        <button onClick={() => handleAction('capture')} disabled={gameState.gameOver}>Capture (C)</button>\n      </div> */}\n      {/* Removed deck display section as per user request */}\n      {/* <div className=\"deck-display-section\">\n        <DeckDisplay deck={gameState.deck} />\n      </div> */}\n      {showActionPopup && (\n        <div\n          className=\"action-popup\"\n          style={{\n            position: 'fixed',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            backgroundColor: 'white',\n            border: '2px solid black',\n            borderRadius: '8px',\n            padding: '20px',\n            zIndex: 1000,\n            boxShadow: '0 4px 8px rgba(0,0,0,0.3)',\n          }}\n        >\n          <h3>Choose Action</h3>\n          <p>\n            Card: {selectedCard.rank}\n            {selectedCard.suit}\n          </p>\n          <button\n            onClick={() => {\n              handleBuild();\n              setShowActionPopup(false);\n            }}\n            disabled={gameState.gameOver}\n            style={{ marginRight: '10px' }}\n          >\n            Build Base\n          </button>\n          <button\n            onClick={() => {\n              // For build on top, we can extend handleBuild with a param if needed\n              handleBuild();\n              setShowActionPopup(false);\n            }}\n            disabled={gameState.gameOver}\n            style={{ marginRight: '10px' }}\n          >\n            Build On Top\n          </button>\n          <button\n            onClick={() => {\n              handleCapture();\n              setShowActionPopup(false);\n            }}\n            disabled={gameState.gameOver}\n          >\n            Capture\n          </button>\n          <button\n            onClick={() => {\n              setShowActionPopup(false);\n              setSelectedCard(null);\n            }}\n            style={{ marginLeft: '10px' }}\n          >\n            Cancel\n          </button>\n        </div>\n      )}\n      {gameState.gameOver && (\n        <div className=\"game-over-section\" style={{ marginTop: '20px' }}>\n          <h2>Game Over</h2>\n          <p>Final Scores:</p>\n          <ul>\n            <li>Player 1: {gameState.scores[0]}</li>\n            <li>Player 2: {gameState.scores[1]}</li>\n          </ul>\n          {gameState.winner === 'draw' ? (\n            <p>The game is a draw!</p>\n          ) : (\n            <p>Winner: Player {gameState.winner + 1}</p>\n          )}\n        </div>\n      )}\n      {/* Removed restart button at bottom of screen as requested */}\n      {/* <div className=\"restart-button-section\" style={{ marginTop: '20px', textAlign: 'center' }}>\n        <button onClick={onRestart}>Restart Game</button>\n      </div> */}\n    </div>\n  );\n}\n\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}