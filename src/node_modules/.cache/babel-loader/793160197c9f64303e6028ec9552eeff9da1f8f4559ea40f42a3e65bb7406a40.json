{"ast":null,"code":"// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        value: rankValue(rank)\n      });\n    }\n  }\n  deck = shuffleDeck(deck);\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = rank => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles trailing a card to the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to trail.\n * @returns {object} The new game state.\n */\nexport const handleTrail = (gameState, card) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer,\n    round\n  } = gameState;\n\n  // New Rule: In round 1, a player cannot trail if they own a build.\n  if (round === 1) {\n    const playerOwnsBuild = tableCards.some(c => c.type === 'build' && c.owner === currentPlayer);\n    if (playerOwnsBuild) {\n      alert(\"You cannot trail a card while you own a build in the first round. You must capture or build.\");\n      return gameState; // Invalid move\n    }\n  }\n\n  // Rule: You cannot trail a card if a loose card of the same rank is on the table.\n  const looseCardRanks = tableCards.filter(c => !c.type) // Only check loose cards, not builds\n  .map(c => c.rank);\n  if (looseCardRanks.includes(card.rank)) {\n    alert(`You cannot trail a ${card.rank} because one is already on the table.`);\n    return gameState; // Invalid move, return original state.\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to trail not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: [...tableCards, card],\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {Array} tableCardsInBuild - The cards from the table to include in the build.\n * @param {number} buildValue - The target value of the build.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, playerCard, tableCardsInBuild, buildValue) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n  const playerHand = playerHands[currentPlayer];\n\n  // Validation 1: Player must have a card in hand that can capture this new build.\n  // The card used for the build doesn't count.\n  const canCaptureBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== playerCard.rank || c.suit !== playerCard.suit));\n  if (!canCaptureBuild) {\n    // This validation is now primarily handled in GameBoard.js before calling,\n    // but it's good to keep it here as a safeguard.\n    alert(`Cannot build ${buildValue}. You do not have a card of this value to capture it later.`);\n    return gameState; // Invalid build, return original state.\n  }\n  const allCardsInBuild = [playerCard, ...tableCardsInBuild];\n  // Sort the cards in the build by value for consistent display.\n  allCardsInBuild.sort((a, b) => rankValue(b.rank) - rankValue(a.rank));\n  const sumOfCards = allCardsInBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n  // --- NEW VALIDATION LOGIC ---\n  // A build is valid if it's a \"Sum Build\" OR a \"Set Build\".\n\n  // Condition 1: Is it a valid \"Sum Build\"?\n  // The sum of card values equals the build value.\n  const isSumBuild = sumOfCards === buildValue;\n\n  // Condition 2: Is it a valid \"Set Build\"?\n  // All cards in the build have the same rank as the build value.\n  const isSetBuild = allCardsInBuild.every(c => rankValue(c.rank) === buildValue);\n\n  // The build must be one of these types, and its value cannot exceed 10.\n  if (!isSumBuild && !isSetBuild || buildValue > 10) {\n    alert(`Invalid build. Cards do not form a valid build of ${buildValue}.`);\n    return gameState;\n  }\n  // --- END NEW VALIDATION LOGIC ---\n\n  // Create the new build object\n  const newBuild = {\n    buildId: `build-${Date.now()}-${Math.random()}`,\n    // Unique ID for the build\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer\n  };\n\n  // Remove the played card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Played card not found in hand.\");\n    return gameState;\n  }\n\n  // Remove the used cards from the table\n  const tableCardIdentifiers = tableCardsInBuild.map(c => `${c.rank}-${c.suit}`);\n  const newTableCards = tableCards.filter(c => {\n    // Keep existing builds that are not part of this new build\n    if (c.type === 'build') {\n      return true;\n    }\n    // Filter out loose cards that are now in the new build\n    return !tableCardIdentifiers.includes(`${c.rank}-${c.suit}`);\n  });\n  newTableCards.push(newBuild);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter(c => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    playerCaptures,\n    currentPlayer\n  } = gameState;\n\n  // Create deep copies for safe mutation\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const newPlayerCaptures = JSON.parse(JSON.stringify(playerCaptures));\n\n  // Remove the selected card from the player's hand\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to capture with not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  const capturedItemsIdentifiers = new Set(selectedTableCards.map(c => c.buildId ? c.buildId : `${c.rank}-${c.suit}`));\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(item => {\n    if (item.type === 'build') {\n      // If any card of this build is in the list of cards to capture, the whole build is captured.\n      const isBuildCaptured = selectedTableCards.some(capturedItem => capturedItem.buildId === item.buildId);\n      return !isBuildCaptured; // return false (remove it) if captured\n    } else {\n      // It's a loose card.\n      return !capturedItemsIdentifiers.has(`${item.rank}-${item.suit}`);\n    }\n  });\n\n  // Add the captured cards to the player's captures\n  const allCapturedCards = [selectedCard, ...selectedTableCards.flatMap(item => item.type === 'build' ? item.cards : item)];\n  newPlayerCaptures[currentPlayer].push(...allCapturedCards);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = playerCaptures => {\n  const scores = [0, 0];\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = gameState => {\n  return gameState.playerHands.every(hand => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = gameState => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};","map":{"version":3,"names":["initializeGame","suits","ranks","deck","suit","rank","push","value","rankValue","shuffleDeck","playerHands","i","pop","tableCards","playerCaptures","currentPlayer","round","scores","gameOver","winner","length","j","Math","floor","random","parseInt","handleTrail","gameState","card","playerOwnsBuild","some","c","type","owner","alert","looseCardRanks","filter","map","includes","newPlayerHands","JSON","parse","stringify","hand","cardIndex","findIndex","splice","console","error","handleBuild","playerCard","tableCardsInBuild","buildValue","playerHand","canCaptureBuild","allCardsInBuild","sort","a","b","sumOfCards","reduce","sum","isSumBuild","isSetBuild","every","newBuild","buildId","Date","now","cards","tableCardIdentifiers","newTableCards","findValidCaptures","selectedCard","validCaptures","cardValue","findCombinations","target","result","find","startIndex","currentCombination","currentSum","looseCards","looseCardCombinations","combination","buildCaptures","build","findValidBuilds","validBuilds","handleCapture","selectedTableCards","newPlayerCaptures","capturedItemsIdentifiers","Set","item","isBuildCaptured","capturedItem","has","allCapturedCards","flatMap","calculateScores","forEach","captures","playerIndex","score","isRoundOver","isGameOver"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/game-logic.js"],"sourcesContent":["\n// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, value: rankValue(rank) });\n    }\n  }\n\n  deck = shuffleDeck(deck);\n\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null,\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = (deck) => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = (rank) => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles trailing a card to the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to trail.\n * @returns {object} The new game state.\n */\nexport const handleTrail = (gameState, card) => {\n  const { playerHands, tableCards, currentPlayer, round } = gameState;\n\n  // New Rule: In round 1, a player cannot trail if they own a build.\n  if (round === 1) {\n    const playerOwnsBuild = tableCards.some(\n      (c) => c.type === 'build' && c.owner === currentPlayer\n    );\n    if (playerOwnsBuild) {\n      alert(\"You cannot trail a card while you own a build in the first round. You must capture or build.\");\n      return gameState; // Invalid move\n    }\n  }\n\n  // Rule: You cannot trail a card if a loose card of the same rank is on the table.\n  const looseCardRanks = tableCards\n    .filter(c => !c.type) // Only check loose cards, not builds\n    .map(c => c.rank);\n\n  if (looseCardRanks.includes(card.rank)) {\n    alert(`You cannot trail a ${card.rank} because one is already on the table.`);\n    return gameState; // Invalid move, return original state.\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);\n\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to trail not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: [...tableCards, card],\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {Array} tableCardsInBuild - The cards from the table to include in the build.\n * @param {number} buildValue - The target value of the build.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, playerCard, tableCardsInBuild, buildValue) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n  const playerHand = playerHands[currentPlayer];\n\n  // Validation 1: Player must have a card in hand that can capture this new build.\n  // The card used for the build doesn't count.\n  const canCaptureBuild = playerHand.some(\n    c => rankValue(c.rank) === buildValue && (c.rank !== playerCard.rank || c.suit !== playerCard.suit)\n  );\n  if (!canCaptureBuild) {\n    // This validation is now primarily handled in GameBoard.js before calling,\n    // but it's good to keep it here as a safeguard.\n    alert(`Cannot build ${buildValue}. You do not have a card of this value to capture it later.`);\n    return gameState; // Invalid build, return original state.\n  }\n\n  const allCardsInBuild = [playerCard, ...tableCardsInBuild];\n  // Sort the cards in the build by value for consistent display.\n  allCardsInBuild.sort((a, b) => rankValue(b.rank) - rankValue(a.rank));\n  const sumOfCards = allCardsInBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n  // --- NEW VALIDATION LOGIC ---\n  // A build is valid if it's a \"Sum Build\" OR a \"Set Build\".\n\n  // Condition 1: Is it a valid \"Sum Build\"?\n  // The sum of card values equals the build value.\n  const isSumBuild = sumOfCards === buildValue;\n\n  // Condition 2: Is it a valid \"Set Build\"?\n  // All cards in the build have the same rank as the build value.\n  const isSetBuild = allCardsInBuild.every(c => rankValue(c.rank) === buildValue);\n\n  // The build must be one of these types, and its value cannot exceed 10.\n  if ((!isSumBuild && !isSetBuild) || buildValue > 10) {\n    alert(`Invalid build. Cards do not form a valid build of ${buildValue}.`);\n    return gameState;\n  }\n  // --- END NEW VALIDATION LOGIC ---\n\n\n  // Create the new build object\n  const newBuild = {\n    buildId: `build-${Date.now()}-${Math.random()}`, // Unique ID for the build\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer,\n  };\n\n  // Remove the played card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Played card not found in hand.\");\n    return gameState;\n  }\n\n  // Remove the used cards from the table\n  const tableCardIdentifiers = tableCardsInBuild.map(c => `${c.rank}-${c.suit}`);\n  const newTableCards = tableCards.filter(c => {\n    // Keep existing builds that are not part of this new build\n    if (c.type === 'build') {\n      return true;\n    }\n    // Filter out loose cards that are now in the new build\n    return !tableCardIdentifiers.includes(`${c.rank}-${c.suit}`);\n  });\n  newTableCards.push(newBuild);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, playerCaptures, currentPlayer } = gameState;\n\n  // Create deep copies for safe mutation\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const newPlayerCaptures = JSON.parse(JSON.stringify(playerCaptures));\n\n  // Remove the selected card from the player's hand\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to capture with not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n\n  const capturedItemsIdentifiers = new Set(selectedTableCards.map(c => c.buildId ? c.buildId : `${c.rank}-${c.suit}`));\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(item => {\n    if (item.type === 'build') {\n      // If any card of this build is in the list of cards to capture, the whole build is captured.\n      const isBuildCaptured = selectedTableCards.some(capturedItem => capturedItem.buildId === item.buildId);\n      return !isBuildCaptured; // return false (remove it) if captured\n    } else {\n      // It's a loose card.\n      return !capturedItemsIdentifiers.has(`${item.rank}-${item.suit}`);\n    }\n  });\n\n  // Add the captured cards to the player's captures\n  const allCapturedCards = [selectedCard, ...selectedTableCards.flatMap(item => item.type === 'build' ? item.cards : item)];\n  newPlayerCaptures[currentPlayer].push(...allCapturedCards);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = (playerCaptures) => {\n  const scores = [0, 0];\n\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = (gameState) => {\n  return gameState.playerHands.every((hand) => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = (gameState) => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}