{"ast":null,"code":"// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        value: rankValue(rank)\n      });\n    }\n  }\n  deck = shuffleDeck(deck);\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = rank => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles trailing a card to the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to trail.\n * @returns {object} The new game state.\n */\nexport const handleTrail = (gameState, card) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n\n  // Rule: You cannot trail a card if a loose card of the same rank is on the table.\n  const looseCardRanks = tableCards.filter(c => !c.type) // Only check loose cards, not builds\n  .map(c => c.rank);\n  if (looseCardRanks.includes(card.rank)) {\n    alert(`You cannot trail a ${card.rank} because one is already on the table.`);\n    return gameState; // Invalid move, return original state.\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to trail not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: [...tableCards, card],\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {Array} tableCardsInBuild - The cards from the table to include in the build.\n * @param {number} buildValue - The target value of the build.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, playerCard, tableCardsInBuild, buildValue) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n  const playerHand = playerHands[currentPlayer];\n\n  // Validation 1: Player must have a card in hand that can capture this new build.\n  // The card used for the build doesn't count.\n  const canCaptureBuild = playerHand.some(c => rankValue(c.rank) === buildValue && c !== playerCard);\n  if (!canCaptureBuild) {\n    console.error(`Cannot build ${buildValue}. Player does not have a card of this value to capture it later.`);\n    // In a real UI, you'd show a message instead of logging.\n    return gameState; // Invalid build, return original state.\n  }\n  const allCardsInBuild = [playerCard, ...tableCardsInBuild];\n  const sumOfCards = allCardsInBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n  // Validation 2: The sum of cards in the build must equal the declared build value.\n  if (sumOfCards !== buildValue) {\n    console.error(`Sum of cards (${sumOfCards}) does not match build value (${buildValue}).`);\n    return gameState;\n  }\n\n  // Create the new build object\n  const newBuild = {\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer\n  };\n\n  // Remove the played card from the player's hand\n  const newPlayerHands = [...playerHands];\n  const cardIndex = newPlayerHands[currentPlayer].findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    newPlayerHands[currentPlayer].splice(cardIndex, 1);\n  } else {\n    console.error(\"Played card not found in hand.\");\n    return gameState;\n  }\n\n  // Remove the used cards from the table\n  const tableCardIdentifiers = tableCardsInBuild.map(c => `${c.rank}-${c.suit}`);\n  const newTableCards = tableCards.filter(c => !tableCardIdentifiers.includes(`${c.rank}-${c.suit}`));\n  newTableCards.push(newBuild);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter(c => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter(c => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    playerCaptures,\n    currentPlayer\n  } = gameState;\n  const capturedCards = [selectedCard, ...selectedTableCards];\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to capture not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(c => !selectedTableCards.includes(c));\n\n  // Add the captured cards to the player's captures\n  const newPlayerCaptures = [...playerCaptures];\n  newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...capturedCards];\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = playerCaptures => {\n  const scores = [0, 0];\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = gameState => {\n  return gameState.playerHands.every(hand => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = gameState => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};","map":{"version":3,"names":["initializeGame","suits","ranks","deck","suit","rank","push","value","rankValue","shuffleDeck","playerHands","i","pop","tableCards","playerCaptures","currentPlayer","round","scores","gameOver","winner","length","j","Math","floor","random","parseInt","handleTrail","gameState","card","looseCardRanks","filter","c","type","map","includes","alert","newPlayerHands","JSON","parse","stringify","hand","cardIndex","findIndex","splice","console","error","handleBuild","playerCard","tableCardsInBuild","buildValue","playerHand","canCaptureBuild","some","allCardsInBuild","sumOfCards","reduce","sum","newBuild","cards","owner","tableCardIdentifiers","newTableCards","findValidCaptures","selectedCard","validCaptures","cardValue","findCombinations","target","result","find","startIndex","currentCombination","currentSum","looseCards","looseCardCombinations","combination","buildCaptures","build","findValidBuilds","validBuilds","handleCapture","selectedTableCards","capturedCards","newPlayerCaptures","calculateScores","forEach","captures","playerIndex","score","isRoundOver","every","isGameOver"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/game-logic.js"],"sourcesContent":["\n// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, value: rankValue(rank) });\n    }\n  }\n\n  deck = shuffleDeck(deck);\n\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null,\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = (deck) => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = (rank) => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles trailing a card to the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to trail.\n * @returns {object} The new game state.\n */\nexport const handleTrail = (gameState, card) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  // Rule: You cannot trail a card if a loose card of the same rank is on the table.\n  const looseCardRanks = tableCards\n    .filter(c => !c.type) // Only check loose cards, not builds\n    .map(c => c.rank);\n\n  if (looseCardRanks.includes(card.rank)) {\n    alert(`You cannot trail a ${card.rank} because one is already on the table.`);\n    return gameState; // Invalid move, return original state.\n  }\n\n  // Remove the card from the player's hand\n  const newPlayerHands = JSON.parse(JSON.stringify(playerHands));\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === card.rank && c.suit === card.suit);\n\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to trail not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: [...tableCards, card],\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} playerCard - The card played from the hand.\n * @param {Array} tableCardsInBuild - The cards from the table to include in the build.\n * @param {number} buildValue - The target value of the build.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, playerCard, tableCardsInBuild, buildValue) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n  const playerHand = playerHands[currentPlayer];\n\n  // Validation 1: Player must have a card in hand that can capture this new build.\n  // The card used for the build doesn't count.\n  const canCaptureBuild = playerHand.some(c => rankValue(c.rank) === buildValue && c !== playerCard);\n  if (!canCaptureBuild) {\n    console.error(`Cannot build ${buildValue}. Player does not have a card of this value to capture it later.`);\n    // In a real UI, you'd show a message instead of logging.\n    return gameState; // Invalid build, return original state.\n  }\n\n  const allCardsInBuild = [playerCard, ...tableCardsInBuild];\n  const sumOfCards = allCardsInBuild.reduce((sum, card) => sum + rankValue(card.rank), 0);\n\n  // Validation 2: The sum of cards in the build must equal the declared build value.\n  if (sumOfCards !== buildValue) {\n      console.error(`Sum of cards (${sumOfCards}) does not match build value (${buildValue}).`);\n      return gameState;\n  }\n\n  // Create the new build object\n  const newBuild = {\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer,\n  };\n\n  // Remove the played card from the player's hand\n  const newPlayerHands = [...playerHands];\n  const cardIndex = newPlayerHands[currentPlayer].findIndex(c => c.rank === playerCard.rank && c.suit === playerCard.suit);\n  if (cardIndex > -1) {\n    newPlayerHands[currentPlayer].splice(cardIndex, 1);\n  } else {\n    console.error(\"Played card not found in hand.\");\n    return gameState;\n  }\n\n  // Remove the used cards from the table\n  const tableCardIdentifiers = tableCardsInBuild.map(c => `${c.rank}-${c.suit}`);\n  const newTableCards = tableCards.filter(c => !tableCardIdentifiers.includes(`${c.rank}-${c.suit}`));\n  newTableCards.push(newBuild);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nexport const findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // 1. Find all combinations of loose cards that sum up to the card value\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validCaptures.push(combination);\n  }\n\n  // 2. Find all builds that can be captured\n  const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.value === cardValue);\n  for (const build of buildCaptures) {\n    validCaptures.push([build]);\n  }\n\n  return validCaptures;\n};\n\n/**\n * Finds all valid builds for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid builds.\n */\nexport const findValidBuilds = (selectedCard, tableCards) => {\n  const validBuilds = [];\n  const cardValue = selectedCard.value;\n\n  // Helper function to find combinations\n  const findCombinations = (cards, target) => {\n    const result = [];\n    const find = (startIndex, currentCombination, currentSum) => {\n      if (currentSum === target) {\n        result.push(currentCombination);\n        return;\n      }\n      if (currentSum > target) {\n        return;\n      }\n      for (let i = startIndex; i < cards.length; i++) {\n        find(i + 1, [...currentCombination, cards[i]], currentSum + cards[i].value);\n      }\n    };\n    find(0, [], 0);\n    return result;\n  };\n\n  // Find all combinations of loose cards that sum up to the cardValue\n  const looseCards = tableCards.filter((c) => c.type !== 'build');\n  const looseCardCombinations = findCombinations(looseCards, cardValue);\n  for (const combination of looseCardCombinations) {\n    validBuilds.push(combination);\n  }\n\n  return validBuilds;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, playerCaptures, currentPlayer } = gameState;\n\n  const capturedCards = [selectedCard, ...selectedTableCards];\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  const hand = newPlayerHands[currentPlayer];\n  const cardIndex = hand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n\n  if (cardIndex > -1) {\n    hand.splice(cardIndex, 1);\n  } else {\n    console.error(\"Card to capture not found in player's hand.\");\n    return gameState; // Card not found, abort.\n  }\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter((c) => !selectedTableCards.includes(c));\n\n  // Add the captured cards to the player's captures\n  const newPlayerCaptures = [...playerCaptures];\n  newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...capturedCards];\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = (playerCaptures) => {\n  const scores = [0, 0];\n\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = (gameState) => {\n  return gameState.playerHands.every((hand) => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = (gameState) => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}