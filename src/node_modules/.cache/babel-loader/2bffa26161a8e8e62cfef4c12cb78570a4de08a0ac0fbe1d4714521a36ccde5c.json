{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Desktop\\\\Linda Baloyi\\\\casino\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\nimport { initializeGame, handleBuild, rankValue, handleAddToBuild, handleTrail, handleCapture } from './game-logic';\nimport CapturedCards from './CapturedCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  CARD: 'card'\n};\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initializeGame());\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []); // No dependency on gameState, so this function is stable.\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n    setGameState(currentGameState => {\n      const {\n        currentPlayer,\n        playerHands,\n        tableCards\n      } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n\n      // 1. Check if it's the current player's turn.\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n\n      // --- ACTION LOGIC ---\n\n      // CASE 1: Dropped on a BUILD\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState; // Build might have been captured by another action\n\n        // Action A: CAPTURE the build\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, [build]);\n        }\n\n        // If capture is not possible, the move is invalid. Provide a clear, direct reason.\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n\n      // CASE 2: Dropped on a LOOSE CARD\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState;\n        const potentialBuildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n\n        // HIERARCHY CHECK 1: Does the player already own a build?\n        const existingBuild = tableCards.find(item => item.type === 'build' && item.owner === currentPlayer);\n        if (existingBuild) {\n          // If they own a build, they MUST add to it if the values match.\n          if (potentialBuildValue === existingBuild.value) {\n            return handleAddToBuild(currentGameState, draggedCard, looseCard, existingBuild);\n          } else {\n            // If the values don't match, it's an illegal move. They can't create a second build.\n            alert(`You cannot create a build of ${potentialBuildValue} because you already own a build of ${existingBuild.value}.`);\n            return currentGameState;\n          }\n        }\n\n        // If we reach here, the player does NOT own a build. They are free to create one.\n\n        // HIERARCHY CHECK 2: Is this an ambiguous same-rank play?\n        const isSameRankPlay = rankValue(draggedCard.rank) === rankValue(looseCard.rank);\n        if (isSameRankPlay) {\n          const remainingHand = playerHand.filter(c => c.rank !== draggedCard.rank || c.suit !== draggedCard.suit);\n          const possibleActions = [];\n          possibleActions.push({\n            type: 'capture',\n            label: `Capture ${looseCard.rank}`\n          });\n          const setBuildValue = rankValue(draggedCard.rank);\n          if (remainingHand.some(c => rankValue(c.rank) === setBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${setBuildValue}`,\n              buildValue: setBuildValue\n            });\n          }\n          if (potentialBuildValue <= 10 && remainingHand.some(c => rankValue(c.rank) === potentialBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${potentialBuildValue}`,\n              buildValue: potentialBuildValue\n            });\n          }\n          if (possibleActions.length > 1) {\n            const promptMessage = `Choose an action:\\n${possibleActions.map((a, i) => `${i + 1}: ${a.label}`).join('\\n')}`;\n            const choice = window.prompt(promptMessage, '1');\n            const choiceIndex = parseInt(choice, 10) - 1;\n            if (choiceIndex >= 0 && choiceIndex < possibleActions.length) {\n              const selectedAction = possibleActions[choiceIndex];\n              return selectedAction.type === 'capture' ? handleCapture(currentGameState, draggedCard, [looseCard]) : handleBuild(currentGameState, draggedCard, [looseCard], selectedAction.buildValue);\n            }\n            return currentGameState; // Invalid or cancelled prompt\n          } else {\n            // Only one action is possible (forced capture), so execute it automatically.\n            return handleCapture(currentGameState, draggedCard, [looseCard]);\n          }\n        }\n\n        // HIERARCHY CHECK 3: If not adding to a build and not a same-rank play,\n        const canBuild = playerHand.some(c => rankValue(c.rank) === potentialBuildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n        if (canBuild && potentialBuildValue <= 10) {\n          return handleBuild(currentGameState, draggedCard, [looseCard], potentialBuildValue);\n        }\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n\n      // Default case if targetInfo.type is unknown\n      return currentGameState;\n    });\n  }, []);\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => {\n      // If a nested drop target has already handled the drop, do nothing.\n      if (monitor.didDrop()) {\n        return;\n      }\n      handleTrailCard(item.card, item.player);\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }), [handleTrailCard]);\n  const isActive = isOver && canDrop;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: `game-board ${isActive ? 'active-drop' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Round: \", gameState.round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"captured-cards-positioned\",\n      children: gameState.playerCaptures.map((capturedCards, index) => /*#__PURE__*/_jsxDEV(CapturedCards, {\n        player: index,\n        cards: capturedCards\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards,\n        onDropOnCard: handleDropOnCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: gameState.playerHands.map((hand, index) => /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: index,\n        cards: hand,\n        isCurrent: gameState.currentPlayer === index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onRestart,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"GgwXH+fbmBwE3xW252r0yOJq53U=\", false, function () {\n  return [useDrop];\n});\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useCallback","PlayerHand","TableCards","useDrop","initializeGame","handleBuild","rankValue","handleAddToBuild","handleTrail","handleCapture","CapturedCards","jsxDEV","_jsxDEV","ItemTypes","CARD","GameBoard","onRestart","_s","gameState","setGameState","handleTrailCard","card","player","currentGameState","currentPlayer","alert","handleDropOnCard","draggedItem","targetInfo","console","warn","playerHands","tableCards","playerHand","draggedCard","type","build","find","c","buildId","rank","value","looseCard","suit","potentialBuildValue","existingBuild","item","owner","isSameRankPlay","remainingHand","filter","possibleActions","push","label","setBuildValue","some","buildValue","length","promptMessage","map","a","i","join","choice","window","prompt","choiceIndex","parseInt","selectedAction","canBuild","isOver","canDrop","drop","accept","monitor","didDrop","collect","isActive","ref","className","children","round","fileName","_jsxFileName","lineNumber","columnNumber","playerCaptures","capturedCards","index","cards","onDropOnCard","hand","isCurrent","gameOver","winner","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\n\nimport {\n  initializeGame,\n  handleBuild,\n  rankValue,\n  handleAddToBuild,\n  handleTrail,\n  handleCapture,\n} from './game-logic';\nimport CapturedCards from './CapturedCards';\n\nconst ItemTypes = {\n  CARD: 'card',\n};\n\nfunction GameBoard({ onRestart }) {\n  const [gameState, setGameState] = useState(initializeGame());\n\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []); // No dependency on gameState, so this function is stable.\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n\n    setGameState(currentGameState => {\n      const { currentPlayer, playerHands, tableCards } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n\n      // 1. Check if it's the current player's turn.\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n\n      // --- ACTION LOGIC ---\n\n      // CASE 1: Dropped on a BUILD\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState; // Build might have been captured by another action\n\n        // Action A: CAPTURE the build\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, [build]);\n        }\n\n        // If capture is not possible, the move is invalid. Provide a clear, direct reason.\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n\n      // CASE 2: Dropped on a LOOSE CARD\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState;\n\n        const potentialBuildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n\n        // HIERARCHY CHECK 1: Does the player already own a build?\n        const existingBuild = tableCards.find(item => item.type === 'build' && item.owner === currentPlayer);\n\n        if (existingBuild) {\n          // If they own a build, they MUST add to it if the values match.\n          if (potentialBuildValue === existingBuild.value) {\n            return handleAddToBuild(currentGameState, draggedCard, looseCard, existingBuild);\n          } else {\n            // If the values don't match, it's an illegal move. They can't create a second build.\n            alert(`You cannot create a build of ${potentialBuildValue} because you already own a build of ${existingBuild.value}.`);\n            return currentGameState;\n          }\n        }\n\n        // If we reach here, the player does NOT own a build. They are free to create one.\n\n        // HIERARCHY CHECK 2: Is this an ambiguous same-rank play?\n        const isSameRankPlay = rankValue(draggedCard.rank) === rankValue(looseCard.rank);\n        if (isSameRankPlay) {\n          const remainingHand = playerHand.filter(c => c.rank !== draggedCard.rank || c.suit !== draggedCard.suit);\n          const possibleActions = [];\n          possibleActions.push({ type: 'capture', label: `Capture ${looseCard.rank}` });\n\n          const setBuildValue = rankValue(draggedCard.rank);\n          if (remainingHand.some(c => rankValue(c.rank) === setBuildValue)) {\n            possibleActions.push({ type: 'build', label: `Build ${setBuildValue}`, buildValue: setBuildValue });\n          }\n          if (potentialBuildValue <= 10 && remainingHand.some(c => rankValue(c.rank) === potentialBuildValue)) {\n            possibleActions.push({ type: 'build', label: `Build ${potentialBuildValue}`, buildValue: potentialBuildValue });\n          }\n\n          if (possibleActions.length > 1) {\n            const promptMessage = `Choose an action:\\n${possibleActions.map((a, i) => `${i + 1}: ${a.label}`).join('\\n')}`;\n            const choice = window.prompt(promptMessage, '1');\n            const choiceIndex = parseInt(choice, 10) - 1;\n            if (choiceIndex >= 0 && choiceIndex < possibleActions.length) {\n              const selectedAction = possibleActions[choiceIndex];\n              return selectedAction.type === 'capture' ? handleCapture(currentGameState, draggedCard, [looseCard]) : handleBuild(currentGameState, draggedCard, [looseCard], selectedAction.buildValue);\n            }\n            return currentGameState; // Invalid or cancelled prompt\n          } else {\n            // Only one action is possible (forced capture), so execute it automatically.\n            return handleCapture(currentGameState, draggedCard, [looseCard]);\n          }\n        }\n\n        // HIERARCHY CHECK 3: If not adding to a build and not a same-rank play,\n        const canBuild = playerHand.some(c => rankValue(c.rank) === potentialBuildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n        if (canBuild && potentialBuildValue <= 10) {\n          return handleBuild(currentGameState, draggedCard, [looseCard], potentialBuildValue);\n        }\n\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n\n      // Default case if targetInfo.type is unknown\n      return currentGameState;\n    });\n  }, []);\n\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => {\n      // If a nested drop target has already handled the drop, do nothing.\n      if (monitor.didDrop()) {\n        return;\n      }\n      handleTrailCard(item.card, item.player);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  }), [handleTrailCard]);\n\n  const isActive = isOver && canDrop;\n\n  return (\n    <div ref={drop} className={`game-board ${isActive ? 'active-drop' : ''}`}>\n      <div className=\"status-section\">\n        <p>Round: {gameState.round}</p>\n      </div>\n      <div className=\"captured-cards-positioned\">\n        {gameState.playerCaptures.map((capturedCards, index) => (\n          <CapturedCards key={index} player={index} cards={capturedCards} />\n        ))}\n      </div>\n      <div className=\"table-cards-section\">\n        <TableCards\n          cards={gameState.tableCards}\n          onDropOnCard={handleDropOnCard}\n        />\n      </div>\n      <div className=\"player-hands-section\">\n        {gameState.playerHands\n          .map((hand, index) => (\n            <PlayerHand\n              key={index}\n              player={index}\n              cards={hand}\n              isCurrent={gameState.currentPlayer === index}\n            />\n          ))}\n      </div>\n      {gameState.gameOver && (\n        <div className=\"game-over-section\">\n          <h2>Game Over</h2>\n          <p>Winner: Player {gameState.winner + 1}</p>\n          <button onClick={onRestart}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}