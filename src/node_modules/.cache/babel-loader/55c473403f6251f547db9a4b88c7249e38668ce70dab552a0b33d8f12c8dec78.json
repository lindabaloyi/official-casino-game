{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Desktop\\\\Linda Baloyi\\\\casino\\\\src\\\\src\\\\components\\\\CardStack.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDrop } from 'react-dnd';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  CARD: 'card'\n};\nconst CardStack = ({\n  cards,\n  onDropStack,\n  stackId\n}) => {\n  _s();\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: item => {\n      // The target is the top card of the stack.\n      // In a loose card stack, there's only one card.\n      // In a build, we interact with the whole build, represented by its top card.\n      const targetCard = cards.length > 0 ? cards[cards.length - 1] : null;\n      if (onDropStack) {\n        onDropStack(item, targetCard);\n      }\n\n      // **This is the crucial part.**\n      // Return an object to signify that the drop was handled here.\n      // This prevents parent drop targets (like the GameBoard) from also handling it.\n      return {\n        stackId\n      };\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }));\n  const isActive = isOver && canDrop;\n  return (\n    /*#__PURE__*/\n    // The `ref={drop}` makes this whole div a drop target.\n    _jsxDEV(\"div\", {\n      ref: drop,\n      className: `card-stack ${isActive ? 'active-drop' : ''}`,\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-in-stack\",\n        style: {\n          top: `${index * 25}px`,\n          zIndex: index\n        },\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          rank: card.rank,\n          suit: card.suit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(CardStack, \"oA/K18MYdxDGpyn78xv0qh28cRQ=\", false, function () {\n  return [useDrop];\n});\n_c = CardStack;\nexport default CardStack;\nvar _c;\n$RefreshReg$(_c, \"CardStack\");","map":{"version":3,"names":["React","useDrop","Card","jsxDEV","_jsxDEV","ItemTypes","CARD","CardStack","cards","onDropStack","stackId","_s","isOver","canDrop","drop","accept","item","targetCard","length","collect","monitor","isActive","ref","className","children","map","card","index","style","top","zIndex","rank","suit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/CardStack.js"],"sourcesContent":["import React from 'react';\r\nimport { useDrop } from 'react-dnd';\r\nimport Card from './Card';\r\n\r\nconst ItemTypes = {\r\n  CARD: 'card',\r\n};\r\n\r\nconst CardStack = ({ cards, onDropStack, stackId }) => {\r\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\r\n    accept: ItemTypes.CARD,\r\n    drop: (item) => {\r\n      // The target is the top card of the stack.\r\n      // In a loose card stack, there's only one card.\r\n      // In a build, we interact with the whole build, represented by its top card.\r\n      const targetCard = cards.length > 0 ? cards[cards.length - 1] : null;\r\n\r\n      if (onDropStack) {\r\n        onDropStack(item, targetCard);\r\n      }\r\n\r\n      // **This is the crucial part.**\r\n      // Return an object to signify that the drop was handled here.\r\n      // This prevents parent drop targets (like the GameBoard) from also handling it.\r\n      return { stackId };\r\n    },\r\n    collect: (monitor) => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop(),\r\n    }),\r\n  }));\r\n\r\n  const isActive = isOver && canDrop;\r\n\r\n  return (\r\n    // The `ref={drop}` makes this whole div a drop target.\r\n    <div ref={drop} className={`card-stack ${isActive ? 'active-drop' : ''}`}>\r\n      {cards.map((card, index) => (\r\n        <div key={index} className=\"card-in-stack\" style={{ top: `${index * 25}px`, zIndex: index }}>\r\n          <Card rank={card.rank} suit={card.suit} />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardStack;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,WAAW;AACnC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAG;EAChBC,IAAI,EAAE;AACR,CAAC;AAED,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,WAAW;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACrD,MAAM,CAAC;IAAEC,MAAM;IAAEC;EAAQ,CAAC,EAAEC,IAAI,CAAC,GAAGb,OAAO,CAAC,OAAO;IACjDc,MAAM,EAAEV,SAAS,CAACC,IAAI;IACtBQ,IAAI,EAAGE,IAAI,IAAK;MACd;MACA;MACA;MACA,MAAMC,UAAU,GAAGT,KAAK,CAACU,MAAM,GAAG,CAAC,GAAGV,KAAK,CAACA,KAAK,CAACU,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI;MAEpE,IAAIT,WAAW,EAAE;QACfA,WAAW,CAACO,IAAI,EAAEC,UAAU,CAAC;MAC/B;;MAEA;MACA;MACA;MACA,OAAO;QAAEP;MAAQ,CAAC;IACpB,CAAC;IACDS,OAAO,EAAGC,OAAO,KAAM;MACrBR,MAAM,EAAEQ,OAAO,CAACR,MAAM,CAAC,CAAC;MACxBC,OAAO,EAAEO,OAAO,CAACP,OAAO,CAAC;IAC3B,CAAC;EACH,CAAC,CAAC,CAAC;EAEH,MAAMQ,QAAQ,GAAGT,MAAM,IAAIC,OAAO;EAElC;IAAA;IACE;IACAT,OAAA;MAAKkB,GAAG,EAAER,IAAK;MAACS,SAAS,EAAE,cAAcF,QAAQ,GAAG,aAAa,GAAG,EAAE,EAAG;MAAAG,QAAA,EACtEhB,KAAK,CAACiB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBvB,OAAA;QAAiBmB,SAAS,EAAC,eAAe;QAACK,KAAK,EAAE;UAAEC,GAAG,EAAE,GAAGF,KAAK,GAAG,EAAE,IAAI;UAAEG,MAAM,EAAEH;QAAM,CAAE;QAAAH,QAAA,eAC1FpB,OAAA,CAACF,IAAI;UAAC6B,IAAI,EAAEL,IAAI,CAACK,IAAK;UAACC,IAAI,EAAEN,IAAI,CAACM;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADlCT,KAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;AAEV,CAAC;AAACzB,EAAA,CApCIJ,SAAS;EAAA,QACuBN,OAAO;AAAA;AAAAoC,EAAA,GADvC9B,SAAS;AAsCf,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}