{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Documents\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport DeckDisplay from './DeckDisplay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialGameState = {\n  deck: [],\n  // will hold the 40 cards\n  tableCards: [],\n  playerHands: [[], []],\n  // two players\n  playerCaptures: [[], []],\n  // captured cards per player\n  currentPlayer: 0,\n  round: 1,\n  scores: [0, 0]\n  // Additional state as needed\n};\nfunction GameBoard() {\n  _s();\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedCard, setSelectedCard] = useState(null);\n  useEffect(() => {\n    // Initialize deck and deal cards here\n    const suits = ['♠', '♥', '♦', '♣'];\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n\n    // Create deck of 40 cards\n    let deck = [];\n    for (let suit of suits) {\n      for (let rank of ranks) {\n        deck.push({\n          suit,\n          rank\n        });\n      }\n    }\n\n    // Shuffle deck\n    for (let i = deck.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n\n    // Deal 10 cards to each player for round 1\n    const playerHands = [[], []];\n    for (let i = 0; i < 10; i++) {\n      playerHands[0].push(deck.pop());\n      playerHands[1].push(deck.pop());\n    }\n\n    // Set initial table cards (4 cards from deck)\n    const tableCards = [];\n    for (let i = 0; i < 4; i++) {\n      tableCards.push(deck.pop());\n    }\n    setGameState(prev => ({\n      ...prev,\n      deck,\n      playerHands,\n      tableCards,\n      currentPlayer: 0,\n      round: 1,\n      playerCaptures: [[], []],\n      scores: [0, 0]\n    }));\n    setSelectedCard(null);\n  }, []);\n  const handleAction = action => {\n    console.log('Action chosen:', action);\n    switch (action) {\n      case 'drop':\n        handleDrop();\n        break;\n      case 'build':\n        handleBuild();\n        break;\n      case 'capture':\n        handleCapture();\n        break;\n      default:\n        console.warn('Unknown action:', action);\n    }\n  };\n\n  // Check if round is over: no cards in deck and both players have empty hands\n  const isRoundOver = () => {\n    const noCardsInDeck = gameState.deck.length === 0;\n    const noCardsInHands = gameState.playerHands.every(hand => hand.length === 0);\n    return noCardsInDeck && noCardsInHands;\n  };\n\n  // Start next round or end game\n  const handleRoundEnd = () => {\n    // Helper function to calculate score for a player's captured cards\n    const calculateScore = capturedCards => {\n      let score = 0;\n      capturedCards.forEach(card => {\n        if (!card.rank || !card.suit) return; // skip builds or invalid cards\n        if (card.rank === 'A') score += 1;\n        if (card.rank === '2' && card.suit === '♠') score += 1;\n        if (card.rank === '10' && card.suit === '♦') score += 2;\n      });\n      return score;\n    };\n    if (gameState.round === 1) {\n      // Reshuffle and redeal for round 2\n      let newDeck = [...gameState.playerCaptures[0], ...gameState.playerCaptures[1], ...gameState.tableCards];\n      // Clear captures and table cards\n      const playerCaptures = [[], []];\n      const tableCards = [];\n      // Shuffle new deck\n      for (let i = newDeck.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\n      }\n      // Deal 10 cards to each player\n      const playerHands = [[], []];\n      for (let i = 0; i < 10; i++) {\n        playerHands[0].push(newDeck.pop());\n        playerHands[1].push(newDeck.pop());\n      }\n      // Set 4 cards on table\n      for (let i = 0; i < 4; i++) {\n        tableCards.push(newDeck.pop());\n      }\n      setGameState(prev => ({\n        ...prev,\n        deck: newDeck,\n        playerHands,\n        playerCaptures,\n        tableCards,\n        round: 2,\n        currentPlayer: 0\n      }));\n    } else {\n      // Round 2 ended, game over - calculate final scores and determine winner\n      const scores = [calculateScore(gameState.playerCaptures[0]), calculateScore(gameState.playerCaptures[1])];\n\n      // Bonus for most captured cards\n      const capturesCount = [gameState.playerCaptures[0].length, gameState.playerCaptures[1].length];\n      if (capturesCount[0] > capturesCount[1]) {\n        scores[0] += 3; // bonus points for most cards\n      } else if (capturesCount[1] > capturesCount[0]) {\n        scores[1] += 3;\n      }\n      let winner = null;\n      if (scores[0] > scores[1]) winner = 0;else if (scores[1] > scores[0]) winner = 1;else winner = 'draw';\n      setGameState(prev => ({\n        ...prev,\n        scores,\n        gameOver: true,\n        winner\n      }));\n    }\n  };\n\n  // Wrap setGameState to include round end check and turn switch\n  const updateGameStateAfterAction = newState => {\n    if (isRoundOver()) {\n      handleRoundEnd();\n    } else {\n      setGameState(newState);\n    }\n    setSelectedCard(null);\n  };\n  const handleDrop = () => {\n    console.log('Drop action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to drop.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    // Check if selectedCard is in player's hand\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    // Remove card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n    // Add card to table as loose card\n    const newTableCards = [...gameState.tableCards, selectedCard];\n    // Update state and clear selected card, switch turn, check round end\n    updateGameStateAfterAction({\n      ...gameState,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      currentPlayer: (currentPlayer + 1) % 2\n    });\n  };\n  const handleBuild = () => {\n    console.log('Build action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to build with.');\n      return;\n    }\n    // For now, just a placeholder: remove selected card from hand and add to table as a build object\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    // For simplicity, create a build with just the selected card as base\n    const build = {\n      type: 'build',\n      buildType: 'ADD',\n      // or 'TOP', to be extended\n      baseValue: selectedCard.rank,\n      cards: [selectedCard],\n      owner: currentPlayer\n    };\n    // Remove card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n    // Add build to tableCards\n    const newTableCards = [...gameState.tableCards, build];\n    // Update state and clear selected card\n    setGameState(prev => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      currentPlayer: (currentPlayer + 1) % 2\n    }));\n    setSelectedCard(null);\n  };\n\n  // Helper function to find valid captures for a given card\n  const findValidCaptures = (card, tableCards) => {\n    // Flatten table cards into individual cards and builds\n    // For simplicity, consider loose cards and builds separately\n    const captures = [];\n\n    // Helper to get numeric value of rank for comparison\n    const rankValue = rank => {\n      if (rank === 'A') return 1;\n      if (rank === 'J') return 11;\n      if (rank === 'Q') return 12;\n      if (rank === 'K') return 13;\n      return parseInt(rank, 10);\n    };\n    const cardValue = rankValue(card.rank);\n\n    // Check loose cards for capture (matching rank)\n    const looseCards = tableCards.filter(c => !c.type);\n    looseCards.forEach(tableCard => {\n      if (rankValue(tableCard.rank) === cardValue) {\n        captures.push([tableCard]);\n      }\n    });\n\n    // Check builds for capture (owner must be current player, baseValue matches card)\n    const buildCaptures = tableCards.filter(c => c.type === 'build' && c.baseValue === card.rank);\n    buildCaptures.forEach(build => {\n      captures.push(build.cards);\n    });\n\n    // TODO: Implement logic to find combinations of cards that sum to cardValue for capture\n\n    return captures;\n  };\n  const handleCapture = () => {\n    console.log('Capture action triggered');\n    if (!selectedCard) {\n      alert('Please select a card to capture with.');\n      return;\n    }\n    const currentPlayer = gameState.currentPlayer;\n    const playerHand = gameState.playerHands[currentPlayer];\n    const cardIndex = playerHand.findIndex(c => c.rank === selectedCard.rank && c.suit === selectedCard.suit);\n    if (cardIndex === -1) {\n      alert('Selected card is not in your hand.');\n      return;\n    }\n    const validCaptures = findValidCaptures(selectedCard, gameState.tableCards);\n    if (validCaptures.length === 0) {\n      alert('No valid captures available with selected card.');\n      return;\n    }\n\n    // Auto-select largest capture combo\n    let largestCapture = validCaptures[0];\n    validCaptures.forEach(capture => {\n      if (capture.length > largestCapture.length) {\n        largestCapture = capture;\n      }\n    });\n\n    // Remove captured cards from table\n    const newTableCards = gameState.tableCards.filter(c => {\n      if (c.type === 'build') {\n        // Remove build if all cards are captured\n        return !largestCapture.every(card => c.cards.some(bc => bc.rank === card.rank && bc.suit === card.suit));\n      } else {\n        // Loose card\n        return !largestCapture.some(card => card.rank === c.rank && card.suit === c.suit);\n      }\n    });\n\n    // Remove selected card from player's hand\n    const newPlayerHands = [...gameState.playerHands];\n    newPlayerHands[currentPlayer] = [...playerHand.slice(0, cardIndex), ...playerHand.slice(cardIndex + 1)];\n\n    // Add captured cards and selected card to player's captures\n    const newPlayerCaptures = [...gameState.playerCaptures];\n    newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...largestCapture, selectedCard];\n\n    // Update state and clear selected card, switch turn\n    setGameState(prev => ({\n      ...prev,\n      playerHands: newPlayerHands,\n      tableCards: newTableCards,\n      playerCaptures: newPlayerCaptures,\n      currentPlayer: (currentPlayer + 1) % 2\n    }));\n    setSelectedCard(null);\n  };\n\n  // Remove duplicate placeholder handleCapture function\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      style: {\n        marginBottom: '10px'\n      },\n      children: !gameState.gameOver ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Round: \", gameState.round]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Current Player: Player \", gameState.currentPlayer + 1, \"'s turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a card and choose an action.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Game over. See final scores below.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: [/*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: 0,\n        cards: gameState.playerHands[0],\n        isCurrent: gameState.currentPlayer === 0,\n        selectedCard: selectedCard,\n        onSelectCard: setSelectedCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: 1,\n        cards: gameState.playerHands[1],\n        isCurrent: gameState.currentPlayer === 1,\n        selectedCard: selectedCard,\n        onSelectCard: setSelectedCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction('drop'),\n        disabled: gameState.gameOver,\n        children: \"Drop (D)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction('build'),\n        disabled: gameState.gameOver,\n        children: \"Build (B)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleAction('capture'),\n        disabled: gameState.gameOver,\n        children: \"Capture (C)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"deck-display-section\",\n      children: /*#__PURE__*/_jsxDEV(DeckDisplay, {\n        deck: gameState.deck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Final Scores:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Player 1: \", gameState.scores[0]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"Player 2: \", gameState.scores[1]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }, this), gameState.winner === 'draw' ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"The game is a draw!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"WTEeKTFbx6JboyJiAG1raJm0GWY=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","PlayerHand","TableCards","DeckDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","initialGameState","deck","tableCards","playerHands","playerCaptures","currentPlayer","round","scores","GameBoard","_s","gameState","setGameState","selectedCard","setSelectedCard","suits","ranks","suit","rank","push","i","length","j","Math","floor","random","pop","prev","handleAction","action","console","log","handleDrop","handleBuild","handleCapture","warn","isRoundOver","noCardsInDeck","noCardsInHands","every","hand","handleRoundEnd","calculateScore","capturedCards","score","forEach","card","newDeck","capturesCount","winner","gameOver","updateGameStateAfterAction","newState","alert","playerHand","cardIndex","findIndex","c","newPlayerHands","slice","newTableCards","build","type","buildType","baseValue","cards","owner","findValidCaptures","captures","rankValue","parseInt","cardValue","looseCards","filter","tableCard","buildCaptures","validCaptures","largestCapture","capture","some","bc","newPlayerCaptures","className","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","player","isCurrent","onSelectCard","onClick","disabled","marginTop","window","location","reload","_c","$RefreshReg$"],"sources":["C:/Users/LB/Documents/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PlayerHand from './PlayerHand';\r\nimport TableCards from './TableCards';\r\nimport DeckDisplay from './DeckDisplay';\r\n\r\nconst initialGameState = {\r\n  deck: [], // will hold the 40 cards\r\n  tableCards: [],\r\n  playerHands: [[], []], // two players\r\n  playerCaptures: [[], []], // captured cards per player\r\n  currentPlayer: 0,\r\n  round: 1,\r\n  scores: [0, 0],\r\n  // Additional state as needed\r\n};\r\n\r\nfunction GameBoard() {\r\n  const [gameState, setGameState] = useState(initialGameState);\r\n  const [selectedCard, setSelectedCard] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Initialize deck and deal cards here\r\n    const suits = ['♠', '♥', '♦', '♣'];\r\n    const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\r\n\r\n    // Create deck of 40 cards\r\n    let deck = [];\r\n    for (let suit of suits) {\r\n      for (let rank of ranks) {\r\n        deck.push({ suit, rank });\r\n      }\r\n    }\r\n\r\n    // Shuffle deck\r\n    for (let i = deck.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [deck[i], deck[j]] = [deck[j], deck[i]];\r\n    }\r\n\r\n    // Deal 10 cards to each player for round 1\r\n    const playerHands = [[], []];\r\n    for (let i = 0; i < 10; i++) {\r\n      playerHands[0].push(deck.pop());\r\n      playerHands[1].push(deck.pop());\r\n    }\r\n\r\n    // Set initial table cards (4 cards from deck)\r\n    const tableCards = [];\r\n    for (let i = 0; i < 4; i++) {\r\n      tableCards.push(deck.pop());\r\n    }\r\n\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      deck,\r\n      playerHands,\r\n      tableCards,\r\n      currentPlayer: 0,\r\n      round: 1,\r\n      playerCaptures: [[], []],\r\n      scores: [0, 0],\r\n    }));\r\n    setSelectedCard(null);\r\n  }, []);\r\n\r\n  const handleAction = (action) => {\r\n    console.log('Action chosen:', action);\r\n    switch (action) {\r\n      case 'drop':\r\n        handleDrop();\r\n        break;\r\n      case 'build':\r\n        handleBuild();\r\n        break;\r\n      case 'capture':\r\n        handleCapture();\r\n        break;\r\n      default:\r\n        console.warn('Unknown action:', action);\r\n    }\r\n  };\r\n\r\n  // Check if round is over: no cards in deck and both players have empty hands\r\n  const isRoundOver = () => {\r\n    const noCardsInDeck = gameState.deck.length === 0;\r\n    const noCardsInHands = gameState.playerHands.every((hand) => hand.length === 0);\r\n    return noCardsInDeck && noCardsInHands;\r\n  };\r\n\r\n  // Start next round or end game\r\n  const handleRoundEnd = () => {\r\n    // Helper function to calculate score for a player's captured cards\r\n    const calculateScore = (capturedCards) => {\r\n      let score = 0;\r\n      capturedCards.forEach((card) => {\r\n        if (!card.rank || !card.suit) return; // skip builds or invalid cards\r\n        if (card.rank === 'A') score += 1;\r\n        if (card.rank === '2' && card.suit === '♠') score += 1;\r\n        if (card.rank === '10' && card.suit === '♦') score += 2;\r\n      });\r\n      return score;\r\n    };\r\n\r\n    if (gameState.round === 1) {\r\n      // Reshuffle and redeal for round 2\r\n      let newDeck = [...gameState.playerCaptures[0], ...gameState.playerCaptures[1], ...gameState.tableCards];\r\n      // Clear captures and table cards\r\n      const playerCaptures = [[], []];\r\n      const tableCards = [];\r\n      // Shuffle new deck\r\n      for (let i = newDeck.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\r\n      }\r\n      // Deal 10 cards to each player\r\n      const playerHands = [[], []];\r\n      for (let i = 0; i < 10; i++) {\r\n        playerHands[0].push(newDeck.pop());\r\n        playerHands[1].push(newDeck.pop());\r\n      }\r\n      // Set 4 cards on table\r\n      for (let i = 0; i < 4; i++) {\r\n        tableCards.push(newDeck.pop());\r\n      }\r\n      setGameState((prev) => ({\r\n        ...prev,\r\n        deck: newDeck,\r\n        playerHands,\r\n        playerCaptures,\r\n        tableCards,\r\n        round: 2,\r\n        currentPlayer: 0,\r\n      }));\r\n    } else {\r\n      // Round 2 ended, game over - calculate final scores and determine winner\r\n      const scores = [\r\n        calculateScore(gameState.playerCaptures[0]),\r\n        calculateScore(gameState.playerCaptures[1]),\r\n      ];\r\n\r\n      // Bonus for most captured cards\r\n      const capturesCount = [\r\n        gameState.playerCaptures[0].length,\r\n        gameState.playerCaptures[1].length,\r\n      ];\r\n      if (capturesCount[0] > capturesCount[1]) {\r\n        scores[0] += 3; // bonus points for most cards\r\n      } else if (capturesCount[1] > capturesCount[0]) {\r\n        scores[1] += 3;\r\n      }\r\n\r\n      let winner = null;\r\n      if (scores[0] > scores[1]) winner = 0;\r\n      else if (scores[1] > scores[0]) winner = 1;\r\n      else winner = 'draw';\r\n\r\n      setGameState((prev) => ({\r\n        ...prev,\r\n        scores,\r\n        gameOver: true,\r\n        winner,\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Wrap setGameState to include round end check and turn switch\r\n  const updateGameStateAfterAction = (newState) => {\r\n    if (isRoundOver()) {\r\n      handleRoundEnd();\r\n    } else {\r\n      setGameState(newState);\r\n    }\r\n    setSelectedCard(null);\r\n  };\r\n\r\n  const handleDrop = () => {\r\n    console.log('Drop action triggered');\r\n    if (!selectedCard) {\r\n      alert('Please select a card to drop.');\r\n      return;\r\n    }\r\n    const currentPlayer = gameState.currentPlayer;\r\n    const playerHand = gameState.playerHands[currentPlayer];\r\n    // Check if selectedCard is in player's hand\r\n    const cardIndex = playerHand.findIndex(\r\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\r\n    );\r\n    if (cardIndex === -1) {\r\n      alert('Selected card is not in your hand.');\r\n      return;\r\n    }\r\n    // Remove card from player's hand\r\n    const newPlayerHands = [...gameState.playerHands];\r\n    newPlayerHands[currentPlayer] = [\r\n      ...playerHand.slice(0, cardIndex),\r\n      ...playerHand.slice(cardIndex + 1),\r\n    ];\r\n    // Add card to table as loose card\r\n    const newTableCards = [...gameState.tableCards, selectedCard];\r\n    // Update state and clear selected card, switch turn, check round end\r\n    updateGameStateAfterAction({\r\n      ...gameState,\r\n      playerHands: newPlayerHands,\r\n      tableCards: newTableCards,\r\n      currentPlayer: (currentPlayer + 1) % 2,\r\n    });\r\n  };\r\n\r\n  const handleBuild = () => {\r\n    console.log('Build action triggered');\r\n    if (!selectedCard) {\r\n      alert('Please select a card to build with.');\r\n      return;\r\n    }\r\n    // For now, just a placeholder: remove selected card from hand and add to table as a build object\r\n    const currentPlayer = gameState.currentPlayer;\r\n    const playerHand = gameState.playerHands[currentPlayer];\r\n    const cardIndex = playerHand.findIndex(\r\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\r\n    );\r\n    if (cardIndex === -1) {\r\n      alert('Selected card is not in your hand.');\r\n      return;\r\n    }\r\n    // For simplicity, create a build with just the selected card as base\r\n    const build = {\r\n      type: 'build',\r\n      buildType: 'ADD', // or 'TOP', to be extended\r\n      baseValue: selectedCard.rank,\r\n      cards: [selectedCard],\r\n      owner: currentPlayer,\r\n    };\r\n    // Remove card from player's hand\r\n    const newPlayerHands = [...gameState.playerHands];\r\n    newPlayerHands[currentPlayer] = [\r\n      ...playerHand.slice(0, cardIndex),\r\n      ...playerHand.slice(cardIndex + 1),\r\n    ];\r\n    // Add build to tableCards\r\n    const newTableCards = [...gameState.tableCards, build];\r\n    // Update state and clear selected card\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      playerHands: newPlayerHands,\r\n      tableCards: newTableCards,\r\n      currentPlayer: (currentPlayer + 1) % 2,\r\n    }));\r\n    setSelectedCard(null);\r\n  };\r\n\r\n  // Helper function to find valid captures for a given card\r\n  const findValidCaptures = (card, tableCards) => {\r\n    // Flatten table cards into individual cards and builds\r\n    // For simplicity, consider loose cards and builds separately\r\n    const captures = [];\r\n\r\n    // Helper to get numeric value of rank for comparison\r\n    const rankValue = (rank) => {\r\n      if (rank === 'A') return 1;\r\n      if (rank === 'J') return 11;\r\n      if (rank === 'Q') return 12;\r\n      if (rank === 'K') return 13;\r\n      return parseInt(rank, 10);\r\n    };\r\n\r\n    const cardValue = rankValue(card.rank);\r\n\r\n    // Check loose cards for capture (matching rank)\r\n    const looseCards = tableCards.filter((c) => !c.type);\r\n    looseCards.forEach((tableCard) => {\r\n      if (rankValue(tableCard.rank) === cardValue) {\r\n        captures.push([tableCard]);\r\n      }\r\n    });\r\n\r\n    // Check builds for capture (owner must be current player, baseValue matches card)\r\n    const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.baseValue === card.rank);\r\n    buildCaptures.forEach((build) => {\r\n      captures.push(build.cards);\r\n    });\r\n\r\n    // TODO: Implement logic to find combinations of cards that sum to cardValue for capture\r\n\r\n    return captures;\r\n  };\r\n\r\n  const handleCapture = () => {\r\n    console.log('Capture action triggered');\r\n    if (!selectedCard) {\r\n      alert('Please select a card to capture with.');\r\n      return;\r\n    }\r\n    const currentPlayer = gameState.currentPlayer;\r\n    const playerHand = gameState.playerHands[currentPlayer];\r\n    const cardIndex = playerHand.findIndex(\r\n      (c) => c.rank === selectedCard.rank && c.suit === selectedCard.suit\r\n    );\r\n    if (cardIndex === -1) {\r\n      alert('Selected card is not in your hand.');\r\n      return;\r\n    }\r\n\r\n    const validCaptures = findValidCaptures(selectedCard, gameState.tableCards);\r\n    if (validCaptures.length === 0) {\r\n      alert('No valid captures available with selected card.');\r\n      return;\r\n    }\r\n\r\n    // Auto-select largest capture combo\r\n    let largestCapture = validCaptures[0];\r\n    validCaptures.forEach((capture) => {\r\n      if (capture.length > largestCapture.length) {\r\n        largestCapture = capture;\r\n      }\r\n    });\r\n\r\n    // Remove captured cards from table\r\n    const newTableCards = gameState.tableCards.filter((c) => {\r\n      if (c.type === 'build') {\r\n        // Remove build if all cards are captured\r\n        return !largestCapture.every((card) =>\r\n          c.cards.some((bc) => bc.rank === card.rank && bc.suit === card.suit)\r\n        );\r\n      } else {\r\n        // Loose card\r\n        return !largestCapture.some((card) => card.rank === c.rank && card.suit === c.suit);\r\n      }\r\n    });\r\n\r\n    // Remove selected card from player's hand\r\n    const newPlayerHands = [...gameState.playerHands];\r\n    newPlayerHands[currentPlayer] = [\r\n      ...playerHand.slice(0, cardIndex),\r\n      ...playerHand.slice(cardIndex + 1),\r\n    ];\r\n\r\n    // Add captured cards and selected card to player's captures\r\n    const newPlayerCaptures = [...gameState.playerCaptures];\r\n    newPlayerCaptures[currentPlayer] = [\r\n      ...newPlayerCaptures[currentPlayer],\r\n      ...largestCapture,\r\n      selectedCard,\r\n    ];\r\n\r\n    // Update state and clear selected card, switch turn\r\n    setGameState((prev) => ({\r\n      ...prev,\r\n      playerHands: newPlayerHands,\r\n      tableCards: newTableCards,\r\n      playerCaptures: newPlayerCaptures,\r\n      currentPlayer: (currentPlayer + 1) % 2,\r\n    }));\r\n    setSelectedCard(null);\r\n  };\r\n\r\n  // Remove duplicate placeholder handleCapture function\r\n\r\n  return (\r\n    <div className=\"game-board\">\r\n      <div className=\"status-section\" style={{ marginBottom: '10px' }}>\r\n        {!gameState.gameOver ? (\r\n          <>\r\n            <p>Round: {gameState.round}</p>\r\n            <p>Current Player: Player {gameState.currentPlayer + 1}'s turn</p>\r\n            <p>Select a card and choose an action.</p>\r\n          </>\r\n        ) : (\r\n          <p>Game over. See final scores below.</p>\r\n        )}\r\n      </div>\r\n      <div className=\"table-cards-section\">\r\n        <TableCards cards={gameState.tableCards} />\r\n      </div>\r\n      <div className=\"player-hands-section\">\r\n        <PlayerHand\r\n          player={0}\r\n          cards={gameState.playerHands[0]}\r\n          isCurrent={gameState.currentPlayer === 0}\r\n          selectedCard={selectedCard}\r\n          onSelectCard={setSelectedCard}\r\n        />\r\n        <PlayerHand\r\n          player={1}\r\n          cards={gameState.playerHands[1]}\r\n          isCurrent={gameState.currentPlayer === 1}\r\n          selectedCard={selectedCard}\r\n          onSelectCard={setSelectedCard}\r\n        />\r\n      </div>\r\n      <div className=\"actions-section\">\r\n        <h3>Actions</h3>\r\n        <button onClick={() => handleAction('drop')} disabled={gameState.gameOver}>Drop (D)</button>\r\n        <button onClick={() => handleAction('build')} disabled={gameState.gameOver}>Build (B)</button>\r\n        <button onClick={() => handleAction('capture')} disabled={gameState.gameOver}>Capture (C)</button>\r\n      </div>\r\n      <div className=\"deck-display-section\">\r\n        <DeckDisplay deck={gameState.deck} />\r\n      </div>\r\n      {gameState.gameOver && (\r\n        <div className=\"game-over-section\" style={{ marginTop: '20px' }}>\r\n          <h2>Game Over</h2>\r\n          <p>Final Scores:</p>\r\n          <ul>\r\n            <li>Player 1: {gameState.scores[0]}</li>\r\n            <li>Player 2: {gameState.scores[1]}</li>\r\n          </ul>\r\n          {gameState.winner === 'draw' ? (\r\n            <p>The game is a draw!</p>\r\n          ) : (\r\n            <p>Winner: Player {gameState.winner + 1}</p>\r\n          )}\r\n          <button onClick={() => window.location.reload()}>Restart Game</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}