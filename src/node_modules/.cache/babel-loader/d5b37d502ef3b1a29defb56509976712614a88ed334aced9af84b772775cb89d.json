{"ast":null,"code":"// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        value: rankValue(rank)\n      });\n    }\n  }\n  deck = shuffleDeck(deck);\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = rank => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles dropping a card on the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to drop.\n * @returns {object} The new game state.\n */\nexport const handleDrop = (gameState, card) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n\n  // Remove the card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== card);\n\n  // Add the card to the table\n  const newTableCards = [...tableCards, card];\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n  const allCardsInBuild = [selectedCard, ...selectedTableCards];\n  const buildValue = allCardsInBuild.reduce((sum, card) => sum + card.value, 0);\n\n  // Create the new build object\n  const newBuild = {\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer\n  };\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== selectedCard);\n\n  // Remove the selected cards from the table\n  const newTableCards = tableCards.filter(c => !selectedTableCards.includes(c));\n  newTableCards.push(newBuild);\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nconst findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // 1. Capture single cards of the same rank\n  const singleCardCaptures = tableCards.filter(c => c.value === cardValue);\n  for (const capture of singleCardCaptures) {\n    validCaptures.push([capture]);\n  }\n\n  // 2. Capture builds with the same value\n  const buildCaptures = tableCards.filter(c => c.type === 'build' && c.value === cardValue);\n  for (const capture of buildCaptures) {\n    validCaptures.push([capture]);\n  }\n\n  // 3. Capture combinations of cards that sum to the selected card's value\n  const findCombinations = (cards, target) => {\n    const results = [];\n    const find = (current, remaining, target) => {\n      if (target === 0) {\n        results.push(current);\n        return;\n      }\n      if (target < 0 || !remaining.length) {\n        return;\n      }\n      find([...current, remaining[0]], remaining.slice(1), target - remaining[0].value);\n      find(current, remaining.slice(1), target);\n    };\n    find([], cards, target);\n    return results;\n  };\n  const combinations = findCombinations(tableCards.filter(c => c.type !== 'build'), cardValue);\n  for (const combination of combinations) {\n    validCaptures.push(combination);\n  }\n  return validCaptures;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const {\n    playerHands,\n    tableCards,\n    playerCaptures,\n    currentPlayer\n  } = gameState;\n  const capturedCards = [selectedCard, ...selectedTableCards];\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== selectedCard);\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter(c => !selectedTableCards.includes(c));\n\n  // Add the captured cards to the player's captures\n  const newPlayerCaptures = [...playerCaptures];\n  newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...capturedCards];\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = playerCaptures => {\n  const scores = [0, 0];\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = gameState => {\n  return gameState.playerHands.every(hand => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = gameState => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};","map":{"version":3,"names":["initializeGame","suits","ranks","deck","suit","rank","push","value","rankValue","shuffleDeck","playerHands","i","pop","tableCards","playerCaptures","currentPlayer","round","scores","gameOver","winner","length","j","Math","floor","random","parseInt","handleDrop","gameState","card","newPlayerHands","filter","c","newTableCards","handleBuild","selectedCard","selectedTableCards","allCardsInBuild","buildValue","reduce","sum","newBuild","type","cards","owner","includes","findValidCaptures","validCaptures","cardValue","singleCardCaptures","capture","buildCaptures","findCombinations","target","results","find","current","remaining","slice","combinations","combination","handleCapture","capturedCards","newPlayerCaptures","calculateScores","forEach","captures","playerIndex","score","isRoundOver","every","hand","isGameOver"],"sources":["C:/Users/LB/Documents/src/src/components/game-logic.js"],"sourcesContent":["\n// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, value: rankValue(rank) });\n    }\n  }\n\n  deck = shuffleDeck(deck);\n\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null,\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = (deck) => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = (rank) => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles dropping a card on the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to drop.\n * @returns {object} The new game state.\n */\nexport const handleDrop = (gameState, card) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  // Remove the card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== card);\n\n  // Add the card to the table\n  const newTableCards = [...tableCards, card];\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Handles creating a build.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table.\n * @returns {object} The new game state.\n */\nexport const handleBuild = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  const allCardsInBuild = [selectedCard, ...selectedTableCards];\n  const buildValue = allCardsInBuild.reduce((sum, card) => sum + card.value, 0);\n\n  // Create the new build object\n  const newBuild = {\n    type: 'build',\n    cards: allCardsInBuild,\n    value: buildValue,\n    owner: currentPlayer,\n  };\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== selectedCard);\n\n  // Remove the selected cards from the table\n  const newTableCards = tableCards.filter((c) => !selectedTableCards.includes(c));\n  newTableCards.push(newBuild);\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Finds all valid captures for a given card.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} tableCards - The cards on the table.\n * @returns {Array} An array of valid captures.\n */\nconst findValidCaptures = (selectedCard, tableCards) => {\n  const validCaptures = [];\n  const cardValue = selectedCard.value;\n\n  // 1. Capture single cards of the same rank\n  const singleCardCaptures = tableCards.filter((c) => c.value === cardValue);\n  for (const capture of singleCardCaptures) {\n    validCaptures.push([capture]);\n  }\n\n  // 2. Capture builds with the same value\n  const buildCaptures = tableCards.filter((c) => c.type === 'build' && c.value === cardValue);\n  for (const capture of buildCaptures) {\n    validCaptures.push([capture]);\n  }\n\n  // 3. Capture combinations of cards that sum to the selected card's value\n  const findCombinations = (cards, target) => {\n    const results = [];\n    const find = (current, remaining, target) => {\n      if (target === 0) {\n        results.push(current);\n        return;\n      }\n      if (target < 0 || !remaining.length) {\n        return;\n      }\n      find([...current, remaining[0]], remaining.slice(1), target - remaining[0].value);\n      find(current, remaining.slice(1), target);\n    };\n    find([], cards, target);\n    return results;\n  };\n\n  const combinations = findCombinations(tableCards.filter(c => c.type !== 'build'), cardValue);\n  for (const combination of combinations) {\n    validCaptures.push(combination);\n  }\n\n\n  return validCaptures;\n};\n\n/**\n * Handles capturing cards from the table.\n * @param {object} gameState - The current game state.\n * @param {object} selectedCard - The card selected from the player's hand.\n * @param {Array} selectedTableCards - The cards selected from the table to capture.\n * @returns {object} The new game state.\n */\nexport const handleCapture = (gameState, selectedCard, selectedTableCards) => {\n  const { playerHands, tableCards, playerCaptures, currentPlayer } = gameState;\n\n  const capturedCards = [selectedCard, ...selectedTableCards];\n\n  // Remove the selected card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== selectedCard);\n\n  // Remove the captured cards from the table\n  const newTableCards = tableCards.filter((c) => !selectedTableCards.includes(c));\n\n  // Add the captured cards to the player's captures\n  const newPlayerCaptures = [...playerCaptures];\n  newPlayerCaptures[currentPlayer] = [...newPlayerCaptures[currentPlayer], ...capturedCards];\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    playerCaptures: newPlayerCaptures,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};\n\n/**\n * Calculates the scores for each player.\n * @param {Array} playerCaptures - An array of captured cards for each player.\n * @returns {Array} An array of scores for each player.\n */\nexport const calculateScores = (playerCaptures) => {\n  const scores = [0, 0];\n\n  playerCaptures.forEach((captures, playerIndex) => {\n    let score = 0;\n    for (const card of captures) {\n      if (card.rank === 'A') {\n        score += 1;\n      } else if (card.rank === '10' && card.suit === '♦') {\n        score += 2;\n      } else if (card.rank === '2' && card.suit === '♠') {\n        score += 1;\n      }\n    }\n    scores[playerIndex] = score;\n  });\n\n  // Add bonus points for the player with the most cards\n  if (playerCaptures[0].length > playerCaptures[1].length) {\n    scores[0] += 3;\n  } else if (playerCaptures[1].length > playerCaptures[0].length) {\n    scores[1] += 3;\n  }\n\n  return scores;\n};\n\n/**\n * Checks if the round is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the round is over, false otherwise.\n */\nexport const isRoundOver = (gameState) => {\n  return gameState.playerHands.every((hand) => hand.length === 0);\n};\n\n/**\n * Checks if the game is over.\n * @param {object} gameState - The current game state.\n * @returns {boolean} True if the game is over, false otherwise.\n */\nexport const isGameOver = (gameState) => {\n  return gameState.round === 2 && isRoundOver(gameState);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}