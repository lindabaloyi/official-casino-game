{"ast":null,"code":"// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({\n        suit,\n        rank,\n        value: rankValue(rank)\n      });\n    }\n  }\n  deck = shuffleDeck(deck);\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = deck => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = rank => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles dropping a card on the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to drop.\n * @returns {object} The new game state.\n */\nexport const handleDrop = (gameState, card) => {\n  const {\n    playerHands,\n    tableCards,\n    currentPlayer\n  } = gameState;\n\n  // Remove the card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter(c => c !== card);\n\n  // Add the card to the table\n  const newTableCards = [...tableCards, card];\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2\n  };\n};","map":{"version":3,"names":["initializeGame","suits","ranks","deck","suit","rank","push","value","rankValue","shuffleDeck","playerHands","i","pop","tableCards","playerCaptures","currentPlayer","round","scores","gameOver","winner","length","j","Math","floor","random","parseInt","handleDrop","gameState","card","newPlayerHands","filter","c","newTableCards"],"sources":["C:/Users/LB/Documents/src/src/components/game-logic.js"],"sourcesContent":["// src/components/game-logic.js\n\n/**\n * Initializes the game state, including shuffling the deck and dealing cards.\n * @returns {object} The initial game state.\n */\nexport const initializeGame = () => {\n  const suits = ['♠', '♥', '♦', '♣'];\n  const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10'];\n  let deck = [];\n\n  for (const suit of suits) {\n    for (const rank of ranks) {\n      deck.push({ suit, rank, value: rankValue(rank) });\n    }\n  }\n\n  deck = shuffleDeck(deck);\n\n  const playerHands = [[], []];\n  for (let i = 0; i < 10; i++) {\n    playerHands[0].push(deck.pop());\n    playerHands[1].push(deck.pop());\n  }\n\n  return {\n    deck,\n    playerHands,\n    tableCards: [],\n    playerCaptures: [[], []],\n    currentPlayer: 0,\n    round: 1,\n    scores: [0, 0],\n    gameOver: false,\n    winner: null,\n  };\n};\n\n/**\n * Shuffles the deck of cards.\n * @param {Array} deck - The deck to shuffle.\n * @returns {Array} The shuffled deck.\n */\nexport const shuffleDeck = (deck) => {\n  for (let i = deck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [deck[i], deck[j]] = [deck[j], deck[i]];\n  }\n  return deck;\n};\n\n/**\n * Converts a card's rank to its numeric value.\n * @param {string} rank - The rank of the card (e.g., 'A', '5', 'K').\n * @returns {number} The numeric value of the rank.\n */\nexport const rankValue = (rank) => {\n  if (rank === 'A') return 1;\n  if (rank === 'J') return 11;\n  if (rank === 'Q') return 12;\n  if (rank === 'K') return 13;\n  return parseInt(rank, 10);\n};\n\n/**\n * Handles dropping a card on the table.\n * @param {object} gameState - The current game state.\n * @param {object} card - The card to drop.\n * @returns {object} The new game state.\n */\nexport const handleDrop = (gameState, card) => {\n  const { playerHands, tableCards, currentPlayer } = gameState;\n\n  // Remove the card from the player's hand\n  const newPlayerHands = [...playerHands];\n  newPlayerHands[currentPlayer] = newPlayerHands[currentPlayer].filter((c) => c !== card);\n\n  // Add the card to the table\n  const newTableCards = [...tableCards, card];\n\n  return {\n    ...gameState,\n    playerHands: newPlayerHands,\n    tableCards: newTableCards,\n    currentPlayer: (currentPlayer + 1) % 2,\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}