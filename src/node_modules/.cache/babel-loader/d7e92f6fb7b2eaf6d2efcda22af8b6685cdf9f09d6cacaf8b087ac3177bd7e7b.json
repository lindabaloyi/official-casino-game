{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LB\\\\Desktop\\\\Linda Baloyi\\\\casino\\\\src\\\\src\\\\components\\\\GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\nimport { initializeGame, handleBuild, rankValue, handleAddToBuild, handleTrail, handleCapture } from './game-logic';\nimport CapturedCards from './CapturedCards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  CARD: 'card'\n};\nfunction GameBoard({\n  onRestart\n}) {\n  _s();\n  const [gameState, setGameState] = useState(initializeGame());\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []); // No dependency on gameState, so this function is stable.\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n    setGameState(currentGameState => {\n      const {\n        currentPlayer,\n        playerHands,\n        tableCards\n      } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n\n      // 1. Check if it's the current player's turn.\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n\n      // --- ACTION LOGIC ---\n\n      // CASE 1: Dropped on a BUILD\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState; // Build might have been captured by another action\n\n        // Action A: CAPTURE the build\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, build.cards);\n        }\n\n        // If capture is not possible, the move is invalid. Provide a clear, direct reason.\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n\n      // CASE 2: Dropped on a LOOSE CARD\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState; // Card might have been captured\n\n        const buildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n        const canBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n        const canCapture = rankValue(draggedCard.rank) === rankValue(looseCard.rank);\n        const existingBuild = tableCards.find(item => item.type === 'build' && item.owner === currentPlayer && item.value === buildValue);\n        if (existingBuild) {\n          return handleAddToBuild(currentGameState, draggedCard, looseCard, existingBuild);\n        }\n        if (canBuild) {\n          return handleBuild(currentGameState, draggedCard, [looseCard], buildValue);\n        }\n        if (canCapture) return handleCapture(currentGameState, draggedCard, [looseCard]);\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n\n      // Default case if targetInfo.type is unknown\n      return currentGameState;\n    });\n  }, []);\n  const [{\n    isOver,\n    canDrop\n  }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => {\n      // If a nested drop target has already handled the drop, do nothing.\n      if (monitor.didDrop()) {\n        return;\n      }\n      handleTrailCard(item.card, item.player);\n    },\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }), [handleTrailCard]);\n  const isActive = isOver && canDrop;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: `game-board ${isActive ? 'active-drop' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-section\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Round: \", gameState.round]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"captured-cards-positioned\",\n      children: gameState.playerCaptures.map((capturedCards, index) => /*#__PURE__*/_jsxDEV(CapturedCards, {\n        player: index,\n        cards: capturedCards\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-cards-section\",\n      children: /*#__PURE__*/_jsxDEV(TableCards, {\n        cards: gameState.tableCards,\n        onDropOnCard: handleDropOnCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-hands-section\",\n      children: gameState.playerHands.map((hand, index) => /*#__PURE__*/_jsxDEV(PlayerHand, {\n        player: index,\n        cards: hand,\n        isCurrent: gameState.currentPlayer === index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), gameState.gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Over\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Winner: Player \", gameState.winner + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onRestart,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"GgwXH+fbmBwE3xW252r0yOJq53U=\", false, function () {\n  return [useDrop];\n});\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useCallback","PlayerHand","TableCards","useDrop","initializeGame","handleBuild","rankValue","handleAddToBuild","handleTrail","handleCapture","CapturedCards","jsxDEV","_jsxDEV","ItemTypes","CARD","GameBoard","onRestart","_s","gameState","setGameState","handleTrailCard","card","player","currentGameState","currentPlayer","alert","handleDropOnCard","draggedItem","targetInfo","console","warn","playerHands","tableCards","playerHand","draggedCard","type","build","find","c","buildId","rank","value","cards","looseCard","suit","buildValue","canBuild","some","canCapture","existingBuild","item","owner","isOver","canDrop","drop","accept","monitor","didDrop","collect","isActive","ref","className","children","round","fileName","_jsxFileName","lineNumber","columnNumber","playerCaptures","map","capturedCards","index","onDropOnCard","hand","isCurrent","gameOver","winner","onClick","_c","$RefreshReg$"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport PlayerHand from './PlayerHand';\nimport TableCards from './TableCards';\nimport { useDrop } from 'react-dnd';\n\nimport {\n  initializeGame,\n  handleBuild,\n  rankValue,\n  handleAddToBuild,\n  handleTrail,\n  handleCapture,\n} from './game-logic';\nimport CapturedCards from './CapturedCards';\n\nconst ItemTypes = {\n  CARD: 'card',\n};\n\nfunction GameBoard({ onRestart }) {\n  const [gameState, setGameState] = useState(initializeGame());\n\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      // handleTrail returns the new state, which will be used to update the game state.\n      return handleTrail(currentGameState, card);\n    });\n  }, []); // No dependency on gameState, so this function is stable.\n\n  // New handler for dropping a card on another card\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n\n    setGameState(currentGameState => {\n      const { currentPlayer, playerHands, tableCards } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n\n      // 1. Check if it's the current player's turn.\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n\n      // --- ACTION LOGIC ---\n\n      // CASE 1: Dropped on a BUILD\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState; // Build might have been captured by another action\n\n        // Action A: CAPTURE the build\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, build.cards);\n        }\n\n        // If capture is not possible, the move is invalid. Provide a clear, direct reason.\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n\n      // CASE 2: Dropped on a LOOSE CARD\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState; // Card might have been captured\n\n        const buildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n        const canBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n        const canCapture = rankValue(draggedCard.rank) === rankValue(looseCard.rank);\n\n        const existingBuild = tableCards.find(\n          item => item.type === 'build' && item.owner === currentPlayer && item.value === buildValue\n        );\n        if (existingBuild) {\n          return handleAddToBuild(currentGameState, draggedCard, looseCard, existingBuild);\n        }\n\n        if (canBuild) {\n          return handleBuild(currentGameState, draggedCard, [looseCard], buildValue);\n        }\n\n        if (canCapture) return handleCapture(currentGameState, draggedCard, [looseCard]);\n\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n\n      // Default case if targetInfo.type is unknown\n      return currentGameState;\n    });\n  }, []);\n\n  const [{ isOver, canDrop }, drop] = useDrop(() => ({\n    accept: ItemTypes.CARD,\n    drop: (item, monitor) => {\n      // If a nested drop target has already handled the drop, do nothing.\n      if (monitor.didDrop()) {\n        return;\n      }\n      handleTrailCard(item.card, item.player);\n    },\n    collect: (monitor) => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n    }),\n  }), [handleTrailCard]);\n\n  const isActive = isOver && canDrop;\n\n  return (\n    <div ref={drop} className={`game-board ${isActive ? 'active-drop' : ''}`}>\n      <div className=\"status-section\">\n        <p>Round: {gameState.round}</p>\n      </div>\n      <div className=\"captured-cards-positioned\">\n        {gameState.playerCaptures.map((capturedCards, index) => (\n          <CapturedCards key={index} player={index} cards={capturedCards} />\n        ))}\n      </div>\n      <div className=\"table-cards-section\">\n        <TableCards\n          cards={gameState.tableCards}\n          onDropOnCard={handleDropOnCard}\n        />\n      </div>\n      <div className=\"player-hands-section\">\n        {gameState.playerHands\n          .map((hand, index) => (\n            <PlayerHand\n              key={index}\n              player={index}\n              cards={hand}\n              isCurrent={gameState.currentPlayer === index}\n            />\n          ))}\n      </div>\n      {gameState.gameOver && (\n        <div className=\"game-over-section\">\n          <h2>Game Over</h2>\n          <p>Winner: Player {gameState.winner + 1}</p>\n          <button onClick={onRestart}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}