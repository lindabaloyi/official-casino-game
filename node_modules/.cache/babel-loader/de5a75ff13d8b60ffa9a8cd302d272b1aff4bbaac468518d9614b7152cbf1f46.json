{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { initializeGame, handleBuild, handleCapture, handleTrail, rankValue } from './game-logic';\nexport const useGameActions = () => {\n  _s();\n  const [gameState, setGameState] = useState(initializeGame());\n  const [modalInfo, setModalInfo] = useState(null);\n  const handleTrailCard = useCallback((card, player) => {\n    setGameState(currentGameState => {\n      if (player !== currentGameState.currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      return handleTrail(currentGameState, card);\n    });\n  }, []);\n  const handleModalAction = useCallback(action => {\n    setGameState(currentGameState => {\n      if (!action || !action.payload) return currentGameState;\n      const {\n        draggedCard,\n        targetCard\n      } = action.payload;\n      if (action.type === 'capture') {\n        return handleCapture(currentGameState, draggedCard, [targetCard]);\n      } else if (action.type === 'build') {\n        return handleBuild(currentGameState, draggedCard, [[targetCard]], action.buildValue);\n      }\n      return currentGameState;\n    });\n    setModalInfo(null);\n  }, []);\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\n      return;\n    }\n    setGameState(currentGameState => {\n      const {\n        currentPlayer,\n        playerHands,\n        tableCards\n      } = currentGameState;\n      const playerHand = playerHands[currentPlayer];\n      const draggedCard = draggedItem.card;\n      if (draggedItem.player !== currentPlayer) {\n        alert(\"It's not your turn!\");\n        return currentGameState;\n      }\n      if (targetInfo.type === 'build') {\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\n        if (!build) return currentGameState;\n        if (rankValue(draggedCard.rank) === build.value) {\n          return handleCapture(currentGameState, draggedCard, [build]);\n        }\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\n        return currentGameState;\n      }\n      if (targetInfo.type === 'loose') {\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\n        if (!looseCard) return currentGameState;\n        if (rankValue(draggedCard.rank) === rankValue(looseCard.rank)) {\n          const remainingHand = playerHand.filter(c => c.rank !== draggedCard.rank || c.suit !== draggedCard.suit);\n          const possibleActions = [];\n          possibleActions.push({\n            type: 'capture',\n            label: `Capture ${looseCard.rank}`,\n            payload: {\n              draggedCard,\n              targetCard: looseCard\n            }\n          });\n          const setBuildValue = rankValue(draggedCard.rank);\n          if (remainingHand.some(c => rankValue(c.rank) === setBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${setBuildValue}`,\n              buildValue: setBuildValue,\n              payload: {\n                draggedCard,\n                targetCard: looseCard\n              }\n            });\n          }\n          const sumBuildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n          if (sumBuildValue <= 10 && remainingHand.some(c => rankValue(c.rank) === sumBuildValue)) {\n            possibleActions.push({\n              type: 'build',\n              label: `Build ${sumBuildValue}`,\n              buildValue: sumBuildValue,\n              payload: {\n                draggedCard,\n                targetCard: looseCard\n              }\n            });\n          }\n          if (possibleActions.length > 1) {\n            setModalInfo({\n              title: 'Choose Your Action',\n              message: `You played a ${draggedCard.rank} on a ${looseCard.rank}. What would you like to do?`,\n              actions: possibleActions\n            });\n            return currentGameState;\n          } else {\n            return handleCapture(currentGameState, draggedCard, [looseCard]);\n          }\n        }\n        const buildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\n        const canCreateBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\n        if (canCreateBuild && buildValue <= 10) {\n          return handleBuild(currentGameState, draggedCard, [[looseCard]], buildValue);\n        }\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\n        return currentGameState;\n      }\n      return currentGameState;\n    });\n  }, [setModalInfo]);\n  return {\n    gameState,\n    modalInfo,\n    handleTrailCard,\n    handleDropOnCard,\n    handleModalAction,\n    setModalInfo\n  };\n};\n_s(useGameActions, \"GDeNyQVdFhUksOWxtZHOvvm/zBQ=\");","map":{"version":3,"names":["useState","useCallback","initializeGame","handleBuild","handleCapture","handleTrail","rankValue","useGameActions","_s","gameState","setGameState","modalInfo","setModalInfo","handleTrailCard","card","player","currentGameState","currentPlayer","alert","handleModalAction","action","payload","draggedCard","targetCard","type","buildValue","handleDropOnCard","draggedItem","targetInfo","console","warn","playerHands","tableCards","playerHand","build","find","c","buildId","rank","value","looseCard","suit","remainingHand","filter","possibleActions","push","label","setBuildValue","some","sumBuildValue","length","title","message","actions","canCreateBuild"],"sources":["C:/Users/LB/Desktop/Linda Baloyi/casino/src/components/useGameActions.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport {\r\n  initializeGame,\r\n  handleBuild,\r\n  handleCapture,\r\n  handleTrail,\r\n  rankValue,\r\n} from './game-logic';\r\n\r\nexport const useGameActions = () => {\r\n  const [gameState, setGameState] = useState(initializeGame());\r\n  const [modalInfo, setModalInfo] = useState(null);\r\n\r\n  const handleTrailCard = useCallback((card, player) => {\r\n    setGameState(currentGameState => {\r\n      if (player !== currentGameState.currentPlayer) {\r\n        alert(\"It's not your turn!\");\r\n        return currentGameState;\r\n      }\r\n      return handleTrail(currentGameState, card);\r\n    });\r\n  }, []);\r\n\r\n  const handleModalAction = useCallback((action) => {\r\n    setGameState(currentGameState => {\r\n      if (!action || !action.payload) return currentGameState;\r\n      const { draggedCard, targetCard } = action.payload;\r\n      if (action.type === 'capture') {\r\n        return handleCapture(currentGameState, draggedCard, [targetCard]);\r\n      } else if (action.type === 'build') {\r\n        return handleBuild(currentGameState, draggedCard, [[targetCard]], action.buildValue);\r\n      }\r\n      return currentGameState;\r\n    });\r\n    setModalInfo(null);\r\n  }, []);\r\n\r\n  const handleDropOnCard = useCallback((draggedItem, targetInfo) => {\r\n    if (!targetInfo || !draggedItem || !draggedItem.card) {\r\n      console.warn(\"Drop on card stack was ambiguous, no action taken.\");\r\n      return;\r\n    }\r\n\r\n    setGameState(currentGameState => {\r\n      const { currentPlayer, playerHands, tableCards } = currentGameState;\r\n      const playerHand = playerHands[currentPlayer];\r\n      const draggedCard = draggedItem.card;\r\n\r\n      if (draggedItem.player !== currentPlayer) {\r\n        alert(\"It's not your turn!\");\r\n        return currentGameState;\r\n      }\r\n\r\n      if (targetInfo.type === 'build') {\r\n        const build = tableCards.find(c => c.buildId === targetInfo.buildId);\r\n        if (!build) return currentGameState;\r\n\r\n        if (rankValue(draggedCard.rank) === build.value) {\r\n          return handleCapture(currentGameState, draggedCard, [build]);\r\n        }\r\n\r\n        alert(`Cannot use a ${draggedCard.rank} to capture a build of ${build.value}. The values must match.`);\r\n        return currentGameState;\r\n      }\r\n\r\n      if (targetInfo.type === 'loose') {\r\n        const looseCard = tableCards.find(c => !c.type && c.rank === targetInfo.rank && c.suit === targetInfo.suit);\r\n        if (!looseCard) return currentGameState;\r\n\r\n        if (rankValue(draggedCard.rank) === rankValue(looseCard.rank)) {\r\n          const remainingHand = playerHand.filter(c => c.rank !== draggedCard.rank || c.suit !== draggedCard.suit);\r\n          const possibleActions = [];\r\n\r\n          possibleActions.push({ type: 'capture', label: `Capture ${looseCard.rank}`, payload: { draggedCard, targetCard: looseCard } });\r\n\r\n          const setBuildValue = rankValue(draggedCard.rank);\r\n          if (remainingHand.some(c => rankValue(c.rank) === setBuildValue)) {\r\n            possibleActions.push({ type: 'build', label: `Build ${setBuildValue}`, buildValue: setBuildValue, payload: { draggedCard, targetCard: looseCard } });\r\n          }\r\n\r\n          const sumBuildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\r\n          if (sumBuildValue <= 10 && remainingHand.some(c => rankValue(c.rank) === sumBuildValue)) {\r\n            possibleActions.push({ type: 'build', label: `Build ${sumBuildValue}`, buildValue: sumBuildValue, payload: { draggedCard, targetCard: looseCard } });\r\n          }\r\n\r\n          if (possibleActions.length > 1) {\r\n            setModalInfo({ title: 'Choose Your Action', message: `You played a ${draggedCard.rank} on a ${looseCard.rank}. What would you like to do?`, actions: possibleActions });\r\n            return currentGameState;\r\n          } else {\r\n            return handleCapture(currentGameState, draggedCard, [looseCard]);\r\n          }\r\n        }\r\n\r\n        const buildValue = rankValue(draggedCard.rank) + rankValue(looseCard.rank);\r\n        const canCreateBuild = playerHand.some(c => rankValue(c.rank) === buildValue && (c.rank !== draggedCard.rank || c.suit !== draggedCard.suit));\r\n\r\n        if (canCreateBuild && buildValue <= 10) {\r\n          return handleBuild(currentGameState, draggedCard, [[looseCard]], buildValue);\r\n        }\r\n\r\n        alert(\"Invalid move. You cannot build or capture with these cards.\");\r\n        return currentGameState;\r\n      }\r\n\r\n      return currentGameState;\r\n    });\r\n  }, [setModalInfo]);\r\n\r\n  return { gameState, modalInfo, handleTrailCard, handleDropOnCard, handleModalAction, setModalInfo };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}